// Variant D — Focus on border loader + nested scroll coordination
// Files: lib/schedule_page.dart (apply patch below)

--- a/lib/schedule_page.dart
+++ b/lib/schedule_page.dart
@@
-class BorderLoaderWidget extends StatefulWidget {
-  final Widget child;
-  final bool active;
-  final BorderLoaderStyle style;
-  final Color color;
-
-  const BorderLoaderWidget({
-    required this.child,
-    this.active = false,
-    this.style = BorderLoaderStyle.unidirectional,
-    this.color = const Color(0xFF409187),
-    super.key,
-  });
-
-  @override
-  State<BorderLoaderWidget> createState() => _BorderLoaderWidgetState();
-}
-
-class _BorderLoaderWidgetState extends State<BorderLoaderWidget>
-    with SingleTickerProviderStateMixin {
-  late AnimationController _controller;
-
-  @override
-  void initState() {
-    super.initState();
-    _controller = AnimationController(
-      vsync: this,
-      duration: const Duration(milliseconds: 1500),
-    );
-    if (widget.active) _controller.repeat();
-  }
-
-  @override
-  void didUpdateWidget(BorderLoaderWidget oldWidget) {
-    super.didUpdateWidget(oldWidget);
-    if (widget.active && !_controller.isAnimating) {
-      _controller.repeat();
-    } else if (!widget.active && _controller.isAnimating) {
-      _controller.stop();
-      _controller.reset();
-    }
-  }
-
-  @override
-  void dispose() {
-    _controller.dispose();
-    super.dispose();
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return AnimatedBuilder(
-      animation: _controller,
-      builder: (context, child) {
-        return CustomPaint(
-          foregroundPainter: _getBorderPainter(),
-          child: child,
-        );
-      },
-      child: widget.child,
-    );
-  }
-
-  CustomPainter _getBorderPainter() {
-    final bool isHighlighted = widget.isCurrentDay; // Используем существующее свойство
-    final Color borderColor = Colors.green; // Фиксированный цвет
-
-    // Возвращаем стандартный painter, так как другие стили не используются в WeekCollapsible
-    return BorderLoaderPainterA(
-      progress: isHighlighted ? _controller.value : 0.0,
-      color: borderColor,
-    );
-  }
-  }
-}
+class BorderLoaderWidget extends StatefulWidget {
+  final Widget child;
+  final bool active;
+  final BorderLoaderStyle style;
+  final Color color;
+
+  const BorderLoaderWidget({
+    required this.child,
+    this.active = false,
+    this.style = BorderLoaderStyle.unidirectional,
+    this.color = const Color(0xFF409187),
+    super.key,
+  });
+
+  @override
+  State<BorderLoaderWidget> createState() => _BorderLoaderWidgetState();
+}
+
+class _BorderLoaderWidgetState extends State<BorderLoaderWidget>
+    with SingleTickerProviderStateMixin {
+  late final AnimationController _controller;
+
+  @override
+  void initState() {
+    super.initState();
+    _controller = AnimationController(
+      vsync: this,
+      duration: const Duration(milliseconds: 1500),
+    )..addListener(() {
+        if (widget.active && mounted) {
+          setState(() {});
+        }
+      });
+    if (widget.active) {
+      _controller.repeat();
+    }
+  }
+
+  @override
+  void didUpdateWidget(covariant BorderLoaderWidget oldWidget) {
+    super.didUpdateWidget(oldWidget);
+    if (widget.active && !_controller.isAnimating) {
+      _controller.repeat();
+    } else if (!widget.active && _controller.isAnimating) {
+      _controller.stop();
+      _controller.reset();
+    }
+  }
+
+  @override
+  void dispose() {
+    _controller.dispose();
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return CustomPaint(
+      foregroundPainter: _resolvePainter(widget.style, widget.color, _controller.value,
+          widget.active),
+      child: widget.child,
+    );
+  }
+
+  CustomPainter? _resolvePainter(
+    BorderLoaderStyle style,
+    Color color,
+    double progress,
+    bool active,
+  ) {
+    if (!active) return null;
+    switch (style) {
+      case BorderLoaderStyle.unidirectional:
+        return BorderLoaderPainterA(progress: progress, color: color);
+      case BorderLoaderStyle.bidirectional:
+        return BorderLoaderPainterB(progress: progress, color: color);
+      case BorderLoaderStyle.marching:
+        return BorderLoaderPainterC(progress: progress, color: color);
+    }
+  }
+}
@@
-        child: NotificationListener<ScrollNotification>(
-          onNotification: (notification) {
-            if (notification is ScrollUpdateNotification) {
-              final metrics = notification.metrics;
-              if (metrics.pixels <= metrics.minScrollExtent &&
-                  notification.scrollDelta! < 0) {
-                return false;
-              }
-              if (metrics.pixels >= metrics.maxScrollExtent &&
-                  notification.scrollDelta! > 0) {
-                return false;
-              }
-            }
-            if (notification is OverscrollNotification) {
-              return false;
-            }
-            return true;
-          },
-          child: SingleChildScrollView(
-            controller: _scrollController,
-            physics: const ClampingScrollPhysics(),
-            child: Column(
+        child: NotificationListener<ScrollNotification>(
+          onNotification: (notification) {
+            if (notification is ScrollUpdateNotification) {
+              final metrics = notification.metrics;
+              final delta = notification.scrollDelta ?? 0;
+              if (metrics.atEdge && ((metrics.pixels <= metrics.minScrollExtent && delta < 0) ||
+                  (metrics.pixels >= metrics.maxScrollExtent && delta > 0))) {
+                return false;
+              }
+            }
+            if (notification is OverscrollNotification) {
+              return false;
+            }
+            return true;
+          },
+          child: PrimaryScrollController.none(
+            child: SingleChildScrollView(
+              controller: _scrollController,
+              physics: const ClampingScrollPhysics(),
+              child: Column(
                 crossAxisAlignment: CrossAxisAlignment.start,
                 children: [
@@
-                child: LessonTile(
+                child: LessonTile(
                   key: ValueKey('lesson_day_${date}_$index'),
                   time: lesson.time,
@@
-                  onPowerAppsPressed: () => _showPowerAppsDialog(lesson.deepLink),
+                  onPowerAppsPressed: () => _showPowerAppsDialog(lesson.deepLink),
