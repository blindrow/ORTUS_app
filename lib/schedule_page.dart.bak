import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:table_calendar/table_calendar.dart'; 
import 'package:intl/intl.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:vibration/vibration.dart';
import 'dart:math' as math;
import 'dart:async';
import 'dart:ui';
import 'widgets/border_painters.dart';

enum LessonType { regular, online, exam, changed }
enum LessonFormat { lecture, practice, lab }
enum ScheduleViewMode { day, week, month }

class Lesson {
  final String time;
  final String title;
  final String teacher;
  final String classroom;
  final Color baseColor;
  final LessonType type; 
  final LessonFormat format;
  final String? examNote;
  final String deepLink;

  const Lesson({
    required this.time,
    required this.title,
    required this.teacher,
    required this.classroom,
    required this.baseColor,
    required this.type,
    required this.format,
    this.examNote,
    this.deepLink = '',
  });
}

class DailySchedule {
  final String day;
  final DateTime date;
  final List<Lesson> lessons;

  DailySchedule({
    required this.day,
    required this.date,
    required this.lessons,
  });
}

// Painter –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É —Ä–∞–º–∫–∏
class _BorderLoadingPainter extends CustomPainter {
  final double progress;
  final Color color;

  _BorderLoadingPainter({required this.progress, required this.color});

  @override
  void paint(Canvas canvas, Size size) {
    final rect = RRect.fromRectAndRadius(
      Rect.fromLTWH(0, 0, size.width, size.height),
      const Radius.circular(8),
    );

    final path = Path()..addRRect(rect);
    final pathMetrics = path.computeMetrics().first;
    final totalLength = pathMetrics.length;
    
    // –†–∏—Å—É–µ–º —Å–≤–µ—á–µ–Ω–∏–µ (glow effect)
    final glowPaint = Paint()
      ..color = color.withOpacity( 0.3)
      ..strokeWidth = 6
      ..style = PaintingStyle.stroke
      ..strokeCap = StrokeCap.round
      ..maskFilter = const MaskFilter.blur(BlurStyle.normal, 4);
    
    final currentLength = totalLength * progress;
    final glowPath = pathMetrics.extractPath(0, currentLength);
    canvas.drawPath(glowPath, glowPaint);
    
    // –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–∏–Ω–∏—é —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    final mainPaint = Paint()
      ..shader = LinearGradient(
        colors: [
          color.withOpacity( 0.4),
          color,
          color,
        ],
        stops: const [0.0, 0.7, 1.0],
      ).createShader(Rect.fromLTWH(0, 0, size.width, size.height))
      ..strokeWidth = 3
      ..style = PaintingStyle.stroke
      ..strokeCap = StrokeCap.round;

    final extractPath = pathMetrics.extractPath(0, currentLength);
    canvas.drawPath(extractPath, mainPaint);
    
    // –†–∏—Å—É–µ–º —è—Ä–∫—É—é —Ç–æ—á–∫—É –Ω–∞ –∫–æ–Ω—Ü–µ (leading dot)
    if (progress > 0 && progress < 1) {
      final dotPosition = pathMetrics.getTangentForOffset(currentLength)?.position;
      if (dotPosition != null) {
        final dotPaint = Paint()
          ..color = Colors.white
          ..style = PaintingStyle.fill;
        canvas.drawCircle(dotPosition, 2.5, dotPaint);
        
        final dotGlowPaint = Paint()
          ..color = color.withOpacity( 0.5)
          ..style = PaintingStyle.fill
          ..maskFilter = const MaskFilter.blur(BlurStyle.normal, 3);
        canvas.drawCircle(dotPosition, 4, dotGlowPaint);
      }
    }
  }

  @override
  bool shouldRepaint(_BorderLoadingPainter oldDelegate) {
    return oldDelegate.progress != progress;
  }
}

class ScheduleService {
  static List<DailySchedule> fetchSchedule() {
    final now = DateTime.now();
    final monday = now.subtract(Duration(days: now.weekday - 1)); // —Ç–µ–∫—É—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    
    List<DailySchedule> schedule = [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 8 –Ω–µ–¥–µ–ª—å (—Ç–µ–∫—É—â–∞—è + 3 –Ω–∞–∑–∞–¥ + 4 –≤–ø–µ—Ä–µ–¥)
    for (int weekOffset = -3; weekOffset <= 4; weekOffset++) {
      final weekStart = monday.add(Duration(days: weekOffset * 7));
      schedule.addAll(_generateWeekSchedule(weekStart, weekOffset));
    }
    
    return schedule;
  }
  
  static List<DailySchedule> _generateWeekSchedule(DateTime weekStart, int weekOffset) {
    // –†–∞–∑–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–µ–¥–µ–ª—å
    bool isCurrentWeek = weekOffset == 0;
    bool isPastWeek = weekOffset < 0;
    
    return [
      DailySchedule(
        day: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        date: weekStart,
        lessons: isCurrentWeek ? [
          const Lesson(
            time: '08:30 - 10:00',
            title: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã',
            teacher: '–ò–≤–∞–Ω–æ–≤ –ê.–°.',
            classroom: '–ê—É–¥. 301',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '10:15 - 11:45',
            title: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ (–û–Ω–ª–∞–π–Ω)',
            teacher: '–ü–µ—Ç—Ä–æ–≤–∞ –ï.–î.',
            classroom: 'Zoom',
            baseColor: Color(0xFFD4E6F1),
            type: LessonType.online,
            format: LessonFormat.practice,
          ),
          const Lesson(
            time: '12:00 - 13:30',
            title: '–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            teacher: '–ö—É–∑–Ω–µ—Ü–æ–≤ –í.–ü.',
            classroom: '–ê—É–¥. 215',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '14:00 - 15:30',
            title: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã',
            teacher: '–ü–µ—Ç—Ä–æ–≤ –ê.–ù.',
            classroom: '–ê—É–¥. 412',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '15:45 - 17:15',
            title: '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞',
            teacher: '–ó–∞–π—Ü–µ–≤ –í.–ê.',
            classroom: '–ê—É–¥. 501',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lab,
          ),
          const Lesson(
            time: '17:30 - 19:00',
            title: '–í–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            teacher: '–°–æ–∫–æ–ª–æ–≤ –î.–í.',
            classroom: '–ê—É–¥. 401',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lab,
          ),
          const Lesson(
            time: '20:00 - 23:00',
            title: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—É—Ä—Å',
            teacher: '–ú–æ—Ä–æ–∑–æ–≤ –î.–ò.',
            classroom: '–ê—É–¥. 102',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
            deepLink: 'com.microsoft.msapps://app123',
          ),
        ] : isPastWeek ? [
          const Lesson(
            time: '09:00 - 10:30',
            title: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            teacher: '–°–º–∏—Ä–Ω–æ–≤ –ì.–ü.',
            classroom: '–ê—É–¥. 202',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '11:00 - 12:30',
            title: '–ò—Å—Ç–æ—Ä–∏—è',
            teacher: '–û—Ä–ª–æ–≤ –ü.–¢.',
            classroom: '–ê—É–¥. 305',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '13:00 - 14:30',
            title: '–§–∏–∑–∏–∫–∞',
            teacher: '–í–æ–ª–∫–æ–≤ –ù.–ú.',
            classroom: '–ê—É–¥. 108',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
        ] : [
          const Lesson(
            time: '08:30 - 10:00',
            title: '–§–∏–∑–∏–∫–∞',
            teacher: '–í–æ–ª–∫–æ–≤ –ù.–ú.',
            classroom: '–ê—É–¥. 108',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '10:15 - 11:45',
            title: '–•–∏–º–∏—è',
            teacher: '–õ–µ–±–µ–¥–µ–≤–∞ –û.–ö.',
            classroom: '–õ–∞–±. 210',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lab,
          ),
          const Lesson(
            time: '12:00 - 13:30',
            title: '–ò—Å—Ç–æ—Ä–∏—è',
            teacher: '–û—Ä–ª–æ–≤ –ü.–¢.',
            classroom: '–ê—É–¥. 305',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
        ],
      ),
      DailySchedule(
        day: '–í—Ç–æ—Ä–Ω–∏–∫',
        date: weekStart.add(const Duration(days: 1)),
        lessons: [
          const Lesson(
            time: '08:30 - 10:00',
            title: '–≠–∫–æ–Ω–æ–º–∏–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π (–õ–∞–±)',
            teacher: '–°–∏–¥–æ—Ä–æ–≤ –ò.–ê.',
            classroom: '–õ–∞–±. 105',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lab,
          ),
          const Lesson(
            time: '10:15 - 11:45',
            title: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
            teacher: '–ù–æ–≤–∏–∫–æ–≤ –°.–î.',
            classroom: '–ê—É–¥. 215',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
            examNote: 'üìù –ó–∞—â–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞',
          ),
          const Lesson(
            time: '12:00 - 13:30',
            title: '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            teacher: '–ú–æ—Ä–æ–∑–æ–≤–∞ –õ.–ö.',
            classroom: '–ê—É–¥. 320',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '14:00 - 15:30',
            title: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã',
            teacher: '–ü–µ—Ç—Ä–æ–≤ –ê.–ù.',
            classroom: '–ê—É–¥. 412',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '15:45 - 17:15',
            title: '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞',
            teacher: '–ó–∞–π—Ü–µ–≤ –í.–ê.',
            classroom: '–ê—É–¥. 501',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lab,
          ),
          const Lesson(
            time: '17:30 - 19:00',
            title: '–¢–µ–æ—Ä–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤',
            teacher: '–ü–∞–≤–ª–æ–≤ –ö.–†.',
            classroom: '–ê—É–¥. 305',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '20:00 - 23:00',
            title: '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
            teacher: '–ò–≤–∞–Ω–æ–≤ –ê.–°.',
            classroom: '–ê—É–¥. 301',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
        ],
      ),
      DailySchedule(
        day: '–°—Ä–µ–¥–∞',
        date: weekStart.add(const Duration(days: 2)),
        lessons: [
          const Lesson(
            time: '08:30 - 10:00',
            title: '–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π',
            teacher: '–ì—Ä–∏–≥–æ—Ä—å–µ–≤ –ú.–ê.',
            classroom: '–ê—É–¥. 210',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '10:00 - 11:30',
            title: '–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö',
            teacher: '–ü–∞–≤–ª–æ–≤ –ö.–†.',
            classroom: '–ê—É–¥. 305',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '11:00 - 12:30',
            title: '–§–∏–ª–æ—Å–æ—Ñ–∏—è',
            teacher: '–ö–æ–∑–ª–æ–≤–∞ –í.–ò.',
            classroom: '–ê—É–¥. 410',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '12:00 - 13:30',
            title: '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏',
            teacher: '–§–µ–¥–æ—Ä–æ–≤ –í.–ü.',
            classroom: '–ê—É–¥. 412',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
          const Lesson(
            time: '12:45 - 14:15',
            title: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑',
            teacher: '–°–º–∏—Ä–Ω–æ–≤ –ì.–ü.',
            classroom: '–ê—É–¥. 202',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
          const Lesson(
            time: '14:30 - 16:00',
            title: '–§–∏–∑–∏–∫–∞',
            teacher: '–í–æ–ª–∫–æ–≤ –ù.–ú.',
            classroom: '–ê—É–¥. 108',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '16:15 - 17:45',
            title: '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
            teacher: '–ù–æ–≤–∏–∫–æ–≤ –°.–î.',
            classroom: '–ê—É–¥. 215',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '20:00 - 23:00',
            title: '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
            teacher: '–ù–æ–≤–∏–∫–æ–≤ –°.–î.',
            classroom: '–ê—É–¥. 215',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lab,
          ),
        ],
      ),
      DailySchedule(
        day: '–ß–µ—Ç–≤–µ—Ä–≥',
        date: weekStart.add(const Duration(days: 3)),
        lessons: [
          const Lesson(
            time: '09:00 - 10:30',
            title: '–°–¥–∞—á–∞ –î–æ–ª–≥–∞ –ø–æ –§–∏–∑–∫—É–ª—å—Ç—É—Ä–µ',
            teacher: '–¢—Ä–µ–Ω–µ—Ä –ê.–í.',
            classroom: '–°–ø–æ—Ä—Ç–∑–∞–ª',
            baseColor: Color(0xFFF9E79F), 
            type: LessonType.changed,
            format: LessonFormat.practice,
          ),
          const Lesson(
            time: '11:00 - 12:30',
            title: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
            teacher: '–°–æ–∫–æ–ª–æ–≤ –î.–í.',
            classroom: '–ê—É–¥. 401',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lab,
          ),
          const Lesson(
            time: '12:45 - 14:15',
            title: '–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
            teacher: '–†–æ–º–∞–Ω–æ–≤ –ò.–ö.',
            classroom: '–ê—É–¥. 502',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
          const Lesson(
            time: '14:30 - 16:00',
            title: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–û',
            teacher: '–ë–µ–ª–æ–≤–∞ –ê.–°.',
            classroom: '–ê—É–¥. 310',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '16:15 - 17:45',
            title: '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–°',
            teacher: '–ò–≤–∞–Ω–æ–≤ –ê.–°.',
            classroom: '–ê—É–¥. 301',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
          const Lesson(
            time: '18:00 - 19:30',
            title: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ü–û',
            teacher: '–ë–µ–ª–æ–≤–∞ –ê.–°.',
            classroom: '–ê—É–¥. 310',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '20:00 - 23:00',
            title: '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
            teacher: '–ë–µ–ª–æ–≤–∞ –ê.–°.',
            classroom: '–ê—É–¥. 310',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lab,
          ),
        ],
      ),
      DailySchedule(
        day: '–ü—è—Ç–Ω–∏—Ü–∞',
        date: weekStart.add(const Duration(days: 4)),
        lessons: [
          const Lesson(
            time: '08:30 - 10:00',
            title: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫',
            teacher: '–ü–µ—Ç—Ä–æ–≤–∞ –ï.–î.',
            classroom: '–ê—É–¥. 205',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
          const Lesson(
            time: '10:00 - 11:30',
            title: '–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö',
            teacher: '–ü–∞–≤–ª–æ–≤ –ö.–†.',
            classroom: '–ê—É–¥. 305',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '12:00 - 13:30',
            title: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ü–û',
            teacher: '–ö—É–∑–Ω–µ—Ü–æ–≤ –í.–ü.',
            classroom: '–ê—É–¥. 215',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '14:30 - 16:00',
            title: '–≠–∫–∑–∞–º–µ–Ω –ø–æ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ',
            teacher: '–ò–≤–∞–Ω–æ–≤ –ê.–°.',
            classroom: '–ê—É–¥. 301',
            baseColor: Color(0xFFD6EAF8), 
            type: LessonType.exam,
            format: LessonFormat.lecture,
            examNote: '‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º',
          ),
          const Lesson(
            time: '16:15 - 17:45',
            title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏',
            teacher: '–°–æ–∫–æ–ª–æ–≤ –î.–í.',
            classroom: '–ê—É–¥. 401',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '21:00 - 23:00',
            title: '–í–µ—á–µ—Ä–Ω–∏–π —Å–µ–º–∏–Ω–∞—Ä –ø–æ AI',
            teacher: '–ù–æ–≤–∏–∫–æ–≤ –ú.–ê.',
            classroom: '–û–Ω–ª–∞–π–Ω',
            baseColor: defaultColor,
            type: LessonType.online,
            format: LessonFormat.lecture,
          ),
        ],
      ),
      DailySchedule(
        day: '–°—É–±–±–æ—Ç–∞',
        date: weekStart.add(const Duration(days: 5)),
        lessons: isCurrentWeek ? [
          const Lesson(
            time: '10:00 - 11:30',
            title: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            teacher: '–°–º–∏—Ä–Ω–æ–≤ –ì.–ü.',
            classroom: '–ê—É–¥. 202',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
          const Lesson(
            time: '12:00 - 13:30',
            title: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é',
            teacher: '–ù–æ–≤–∏–∫–æ–≤ –°.–î.',
            classroom: '–ê—É–¥. 215',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
          const Lesson(
            time: '14:00 - 15:30',
            title: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä',
            teacher: '–†–æ–º–∞–Ω–æ–≤ –ò.–ö.',
            classroom: '–ê—É–¥. 502',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lab,
          ),
          const Lesson(
            time: '16:00 - 17:30',
            title: '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω',
            teacher: '–ó–∞–π—Ü–µ–≤ –í.–ê.',
            classroom: '–ê—É–¥. 501',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
          const Lesson(
            time: '18:00 - 19:30',
            title: '3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ',
            teacher: '–ó–∞–π—Ü–µ–≤ –í.–ê.',
            classroom: '–ê—É–¥. 501',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lab,
          ),
          const Lesson(
            time: '20:00 - 23:00',
            title: '–•–∞–∫–∞—Ç–æ–Ω',
            teacher: '–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π',
            classroom: '–ê—É–¥. 401',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
        ] : [],
      ),
      DailySchedule(
        day: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        date: weekStart.add(const Duration(days: 6)),
        lessons: isCurrentWeek ? [
          const Lesson(
            time: '10:00 - 11:30',
            title: '–ô–æ–≥–∞ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è',
            teacher: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –°–≤–µ—Ç–ª–∞–Ω–∞ –ö.',
            classroom: '–°–ø–æ—Ä—Ç–∑–∞–ª',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
          const Lesson(
            time: '12:00 - 13:30',
            title: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∫–ª—É–±',
            teacher: '–ü–µ—Ç—Ä–æ–≤–∞ –ï.–î.',
            classroom: '–ê—É–¥. 205',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
          const Lesson(
            time: '14:00 - 15:30',
            title: '–®–∞—Ö–º–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä',
            teacher: '–°—Ç—É–¥—Å–æ–≤–µ—Ç',
            classroom: '–ê—É–¥. 101',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
          const Lesson(
            time: '16:00 - 17:30',
            title: '–ö–∏–Ω–æ–∫–ª—É–±',
            teacher: '–ò–≤–∞–Ω–æ–≤ –ê.–°.',
            classroom: '–ê–∫—Ç–æ–≤—ã–π –∑–∞–ª',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.lecture,
          ),
          const Lesson(
            time: '20:00 - 23:00',
            title: '–í–µ—á–µ—Ä –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä',
            teacher: '–°—Ç—É–¥—Å–æ–≤–µ—Ç',
            classroom: '–ê—É–¥. 301',
            baseColor: defaultColor,
            type: LessonType.regular,
            format: LessonFormat.practice,
          ),
        ] : [],
      ),
    ];
  }
}


const Color defaultColor = Color(0xFFE8F5E8);

class SchedulePage extends StatefulWidget {
  const SchedulePage({super.key});
  
  @override
  _SchedulePageState createState() => _SchedulePageState();
}

class _SchedulePageState extends State<SchedulePage> with TickerProviderStateMixin, AutomaticKeepAliveClientMixin {
  // State variables
  late DateTime _currentDate; // –î–ª—è Day view
  late DateTime _currentWeekDate; // –î–ª—è Week view (–æ—Ç–¥–µ–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
  late DateTime _monthViewDate; // –î–ª—è Month view (–æ—Ç–¥–µ–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
  DateTime? _selectedDay; // Nullable –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
  DateTime? _previousSelectedDay; // –ü–£–ù–ö–¢ 22: –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è highlight
  late DateTime _focusedDay;
  late List<DailySchedule> fullSchedule;
  ScheduleViewMode _viewMode = ScheduleViewMode.week;
  ScheduleViewMode _previousViewMode = ScheduleViewMode.week;
  final Map<DateTime, List<dynamic>> _events = {};
  final Map<DateTime, List<int>> _expandedDays = {};
  int _navigationDirection = 1; // 1 = –≤–ø—Ä–∞–≤–æ (–≤–ø–µ—Ä–µ–¥), -1 = –≤–ª–µ–≤–æ (–Ω–∞–∑–∞–¥)
  int _weekSwipeDirection = 1; // –ü–£–ù–ö–¢ 19: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–∞–π–ø–∞ –¥–ª—è Week view
  final Set<String> _expandedTiles = {}; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—Ä—Ç–∫–æ–≤
  final Set<String> _viewedExams = {}; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö
  final Set<String> _seenExamDates = {}; // –ü–£–ù–ö–¢ 9: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö SnackBar –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö
  final Set<String> _openedOnlineLinks = {}; // –ü–£–ù–ö–¢ 13: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–Ω–ª–∞–π–Ω-—Å—Å—ã–ª–æ–∫
  final Set<String> _vibrationFiredForDate = {}; // –ü–£–ù–ö–¢ 8: Debounce –≤–∏–±—Ä–∞—Ü–∏–∏
  Timer? _snackbarDebounceTimer;
  final ScrollController _scrollController = ScrollController();
  bool _isFirstLaunch = true; // –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
  bool _seenSessionVibration = false; // –§–ª–∞–≥ –≤–∏–±—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
  final Map<String, GlobalKey> _tileKeys = {}; // –ö–ª—é—á–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –¥–Ω–µ–π (–ù–µ–¥–µ–ª—è)
  final Map<String, GlobalKey> _examLessonKeys = {}; // –ü–£–ù–ö–¢ 21: –ö–ª—é—á–∏ –¥–ª—è —É—Ä–æ–∫–æ–≤ —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π
  
  // DRAG OVAL VARIABLES
  bool _isDraggingOval = false;
  double _ovalDragOffset = 0.0;
  late AnimationController _ovalSnapController;
  late Animation<double> _ovalSnapAnimation;

  // Animation variables - –û–¢–ö–õ–Æ–ß–ï–ù–û
  // double _indicatorWidth = 0;
  // double _indicatorOffset = 0;
  final GlobalKey _switcherKey = GlobalKey();
  final GlobalKey _dayKey = GlobalKey();
  final GlobalKey _weekKey = GlobalKey();
  final GlobalKey _monthKey = GlobalKey();

  // Getter for view mode
  ScheduleViewMode get _currentMode => _viewMode;
  
  // Setter for view mode
  set _currentMode(ScheduleViewMode mode) {
    if (_viewMode != mode) {
      debugPrint('EVENT: mode_switch | from: $_viewMode | to: $mode | timestamp: ${DateTime.now()}');
      _previousViewMode = _viewMode;
      setState(() {
        _viewMode = mode;
      });
    }
  }

  @override
  void initState() {
    super.initState();
    final now = DateTime.now();
    _currentDate = DateTime(now.year, now.month, now.day);
    _currentWeekDate = DateTime(now.year, now.month, now.day); // –û—Ç–¥–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è Week view
    _monthViewDate = DateTime(now.year, now.month, now.day); // –û—Ç–¥–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è Month view
    _focusedDay = _currentDate;
    fullSchedule = ScheduleService.fetchSchedule();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º _selectedDay –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
    WidgetsBinding.instance.addPostFrameCallback((_) {
      setState(() {
        _selectedDay = DateTime(now.year, now.month, now.day);
      });
    });
    
    // Initialize drag oval animation controller
    _ovalSnapController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 300),
    );
    _ovalSnapAnimation = Tween<double>(begin: 0, end: 0).animate(
      CurvedAnimation(parent: _ovalSnapController, curve: Curves.easeOutCubic),
    );
    
    // Initialize expanded days for the current week
    final startOfWeek = _getStartOfWeek(_currentDate);
    for (var i = 0; i < 7; i++) {
      final day = startOfWeek.add(Duration(days: i));
      _expandedDays[day] = [0, 1, 2, 3, 4, 5, 6]; // Expand all days by default
    }
    
    // –ü–µ—Ä–≤–∏—á–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –û–î–ò–ù –†–ê–ó –ø—Ä–∏ cold start
    if (!_seenSessionVibration) {
      WidgetsBinding.instance.addPostFrameCallback((_) async {
        final hasVibrator = await Vibration.hasVibrator() ?? false;
        if (hasVibrator) {
          Vibration.vibrate(duration: 60);
          _seenSessionVibration = true;
          debugPrint('EVENT: session_vibration | timestamp: ${DateTime.now()}');
        }
      });
    }
  }

  @override
  void dispose() {
    _scrollController.dispose();
    _snackbarDebounceTimer?.cancel();
    _ovalSnapController.dispose();
    super.dispose();
  }

  void _showExamSnackBar(String examNote) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(Icons.description_outlined, color: Colors.white, size: 20),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                examNote,
                style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 15),
              ),
            ),
          ],
        ),
        backgroundColor: const Color(0xFF409187),
        behavior: SnackBarBehavior.floating,
        margin: const EdgeInsets.only(bottom: 20, left: 16, right: 16),
        duration: const Duration(seconds: 5),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        action: SnackBarAction(
          label: '–ü–û–ö–ê–ó–ê–¢–¨',
          textColor: Colors.white,
          backgroundColor: Colors.white.withOpacity(0.2),
          onPressed: () {
            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
          },
        ),
      ),
    );
  }

  void _showDayPickerDialog() {
    debugPrint('EVENT: quickjump_open | screen: day | timestamp: ${DateTime.now()}');
    final activeColor = const Color(0xFF409187);
    final normalizedToday = _normalizeDate(DateTime.now());
    DateTime displayWeekStart = _getStartOfWeek(_currentDate);

    showDialog(
      context: context,
      barrierDismissible: true,
      builder: (context) {
        return Dialog(
          backgroundColor: Colors.transparent,
          insetPadding: const EdgeInsets.symmetric(horizontal: 30),
          child: StatefulBuilder(builder: (context, setStateDialog) {
            final displayWeekEnd = displayWeekStart.add(const Duration(days: 6));
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç—Ä–µ–ª–æ–∫
            final prevWeekStart = displayWeekStart.subtract(const Duration(days: 7));
            final nextWeekStart = displayWeekStart.add(const Duration(days: 7));
            final isPrevWeekCurrent = normalizedToday.isAfter(prevWeekStart.subtract(const Duration(days: 1))) && 
                                      normalizedToday.isBefore(prevWeekStart.add(const Duration(days: 7)));
            final isNextWeekCurrent = normalizedToday.isAfter(nextWeekStart.subtract(const Duration(days: 1))) && 
                                      normalizedToday.isBefore(nextWeekStart.add(const Duration(days: 7)));

            return Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // –í–µ—Ä—Ö: —Å—Ç—Ä–µ–ª–∫–∏ + –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–¥–µ–ª–∏
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      // –°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–∑–∞–¥ (—Å –∫—Ä—É–≥–æ–º)
                      InkWell(
                        onTap: () {
                          setStateDialog(() {
                            displayWeekStart = displayWeekStart.subtract(const Duration(days: 7));
                          });
                          setState(() {
                            _currentDate = displayWeekStart;
                          });
                        },
                        borderRadius: BorderRadius.circular(50),
                        child: Container(
                          width: 40,
                          height: 40,
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            color: isPrevWeekCurrent ? activeColor.withOpacity( 0.2) : Colors.transparent,
                            border: Border.all(
                              color: isPrevWeekCurrent ? activeColor : Colors.grey.shade300,
                              width: 2,
                            ),
                          ),
                          child: Center(
                            child: Padding(
                              padding: const EdgeInsets.only(left: 3),
                              child: Icon(
                                Icons.arrow_back_ios,
                                size: 16,
                                color: isPrevWeekCurrent ? activeColor : Colors.grey.shade600,
                              ),
                            ),
                          ),
                        ),
                      ),

                      // –î–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–¥–µ–ª–∏
                      Text(
                        '${_formatDate(displayWeekStart)} ‚Äì ${_formatDate(displayWeekEnd)}',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                          color: Colors.grey.shade600,
                        ),
                      ),

                      // –°—Ç—Ä–µ–ª–∫–∞ –≤–ø–µ—Ä–µ–¥ (—Å –∫—Ä—É–≥–æ–º)
                      InkWell(
                        onTap: () {
                          setStateDialog(() {
                            displayWeekStart = displayWeekStart.add(const Duration(days: 7));
                          });
                          setState(() {
                            _currentDate = displayWeekStart;
                          });
                        },
                        borderRadius: BorderRadius.circular(50),
                        child: Container(
                          width: 40,
                          height: 40,
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            color: isNextWeekCurrent ? activeColor.withOpacity( 0.2) : Colors.transparent,
                            border: Border.all(
                              color: isNextWeekCurrent ? activeColor : Colors.grey.shade300,
                              width: 2,
                            ),
                          ),
                          child: Center(
                            child: Icon(
                              Icons.arrow_forward_ios,
                              size: 16,
                              color: isNextWeekCurrent ? activeColor : Colors.grey.shade600,
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),

                  const SizedBox(height: 16),

                  // 7 –∫–Ω–æ–ø–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: List.generate(7, (index) {
                      final day = displayWeekStart.add(Duration(days: index));
                      final normalizedDay = _normalizeDate(day);
                      final isToday = normalizedDay == normalizedToday;
                      final dayName = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][index];

                      final dayIsCurrentMonth = day.month == DateTime.now().month && day.year == DateTime.now().year;
                      final isSelected = _selectedDay != null && normalizedDay == _normalizeDate(_selectedDay!);
                      final isCurrentDate = normalizedDay == _normalizeDate(_currentDate);

                      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞
                      Color textColor;
                      Color borderColor;
                      Color backgroundColor;

                      // –§–æ–Ω –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ (isToday)
                      backgroundColor = isToday ? activeColor.withOpacity( 0.2) : Colors.transparent;
                      
                      // –û–±–≤–æ–¥–∫–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–Ω–µ (isCurrentDate)
                      if (isCurrentDate) {
                        borderColor = activeColor;
                        textColor = dayIsCurrentMonth ? activeColor : Colors.grey.shade600;
                      } else if (isToday) {
                        // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è, –Ω–æ –Ω–µ –≤—ã–±—Ä–∞–Ω - —Å–µ—Ä–∞—è –æ–±–≤–æ–¥–∫–∞
                        borderColor = Colors.grey.shade400;
                        textColor = activeColor;
                      } else {
                        // –û–±—ã—á–Ω—ã–π –¥–µ–Ω—å
                        borderColor = Colors.grey.shade300;
                        textColor = dayIsCurrentMonth ? activeColor : Colors.grey.shade600;
                      }

                      return Expanded(
                        child: Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 3),
                          child: InkWell(
                            borderRadius: BorderRadius.circular(8),
                            onTap: () {
                              setState(() {
                                _currentDate = normalizedDay;
                                _selectedDay = normalizedDay;
                              });
                              Navigator.of(context).pop();
                            },
                            child: Container(
                              padding: const EdgeInsets.symmetric(vertical: 10),
                              decoration: BoxDecoration(
                                color: backgroundColor,
                                borderRadius: BorderRadius.circular(8),
                                border: Border.all(
                                  color: borderColor,
                                  width: 2,
                                ),
                              ),
                              child: Column(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  Text(
                                    dayName,
                                    style: TextStyle(
                                      fontSize: 12,
                                      fontWeight: FontWeight.bold,
                                      color: textColor,
                                    ),
                                  ),
                                  const SizedBox(height: 4),
                                  Text(
                                    day.day.toString(),
                                    style: TextStyle(
                                      fontSize: 15,
                                      fontWeight: FontWeight.bold,
                                      color: textColor,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                      );
                    }),
                  ),
                ],
              ),
            );
          }),
        );
      },
    );
  }



  void _showWeekPickerDialog() {
    debugPrint('EVENT: quickjump_open | screen: week | timestamp: ${DateTime.now()}');
    final activeColor = const Color(0xFF409187);
    final greyColor = const Color(0xFF757575);
    final currentMonth = DateTime.now().month;
    final currentYear = DateTime.now().year;
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ Week view
    DateTime displayMonth = DateTime(_currentWeekDate.year, _currentWeekDate.month, 1);

    showDialog(
      context: context,
      barrierDismissible: true,
      builder: (context) {
        return Dialog(
          backgroundColor: Colors.transparent,
          insetPadding: const EdgeInsets.symmetric(horizontal: 40),
          child: StatefulBuilder(builder: (context, setStateDialog) {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–¥–µ–ª–∏ –º–µ—Å—è—Ü–∞
            List<Map<String, DateTime>> getWeeksInMonth(DateTime month) {
              final firstDay = DateTime(month.year, month.month, 1);
              final lastDay = DateTime(month.year, month.month + 1, 0);
              
              // –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏
              DateTime weekStart = _getStartOfWeek(firstDay);
              List<Map<String, DateTime>> weeks = [];
              
              while (weekStart.isBefore(lastDay) || weekStart.isAtSameMomentAs(lastDay)) {
                final weekEnd = weekStart.add(const Duration(days: 6));
                weeks.add({'start': weekStart, 'end': weekEnd});
                weekStart = weekStart.add(const Duration(days: 7));
              }
              
              return weeks;
            }

            final weeks = getWeeksInMonth(displayMonth);
            final isCurrentMonth = displayMonth.month == currentMonth && displayMonth.year == currentYear;
            final firstDay = DateTime(displayMonth.year, displayMonth.month, 1);
            final lastDay = DateTime(displayMonth.year, displayMonth.month + 1, 0);

            return Container(
              constraints: const BoxConstraints(maxWidth: 300),
              padding: const EdgeInsets.all(14),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // –í–µ—Ä—Ö: —Å—Ç—Ä–µ–ª–∫–∏ + –º–µ—Å—è—Ü –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      InkWell(
                        onTap: () {
                          setStateDialog(() {
                            displayMonth = DateTime(displayMonth.year, displayMonth.month - 1, 1);
                          });
                        },
                        borderRadius: BorderRadius.circular(50),
                        child: Container(
                          width: 36,
                          height: 36,
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            border: Border.all(
                              color: Colors.grey.shade300,
                              width: 2,
                            ),
                          ),
                          child: Center(
                            child: Padding(
                              padding: const EdgeInsets.only(left: 3),
                              child: Icon(
                                Icons.arrow_back_ios,
                                size: 14,
                                color: Colors.grey.shade600,
                              ),
                            ),
                          ),
                        ),
                      ),

                      Expanded(
                        child: Column(
                          children: [
                            // –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ (—Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã)
                            Text(
                              _capitalize(DateFormat('MMMM', 'ru_RU').format(displayMonth)),
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 16,
                                color: isCurrentMonth ? activeColor : greyColor,
                              ),
                            ),
                            const SizedBox(height: 2),
                            // –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ—Å—è—Ü–∞
                            Text(
                              '${_formatDate(firstDay)} ‚Äì ${_formatDate(lastDay)}',
                              style: TextStyle(
                                fontSize: 12,
                                fontWeight: FontWeight.w500,
                                color: isCurrentMonth ? activeColor : greyColor,
                              ),
                            ),
                          ],
                        ),
                      ),

                      InkWell(
                        onTap: () {
                          setStateDialog(() {
                            displayMonth = DateTime(displayMonth.year, displayMonth.month + 1, 1);
                          });
                        },
                        borderRadius: BorderRadius.circular(50),
                        child: Container(
                          width: 36,
                          height: 36,
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            border: Border.all(
                              color: Colors.grey.shade300,
                              width: 2,
                            ),
                          ),
                          child: Center(
                            child: Icon(
                              Icons.arrow_forward_ios,
                              size: 14,
                              color: Colors.grey.shade600,
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),

                  const SizedBox(height: 10),

                  // –°–ø–∏—Å–æ–∫ –Ω–µ–¥–µ–ª—å
                  ...weeks.map((week) {
                    final weekStart = week['start']!;
                    final weekEnd = week['end']!;
                    final weekStartNorm = _normalizeDate(weekStart);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ–π (—Å today)
                    final today = _normalizeDate(DateTime.now());
                    final todayWeekStart = _getStartOfWeek(DateTime.now());
                    final isRealCurrentWeek = weekStartNorm == _normalizeDate(todayWeekStart);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–µ–π
                    final selectedWeekStart = _getStartOfWeek(_currentWeekDate);
                    final isSelectedWeek = weekStartNorm == _normalizeDate(selectedWeekStart);

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏
                    final startIsCurrentMonth = weekStart.month == currentMonth && weekStart.year == currentYear;
                    final endIsCurrentMonth = weekEnd.month == currentMonth && weekEnd.year == currentYear;

                    return Padding(
                      padding: const EdgeInsets.only(bottom: 6),
                      child: InkWell(
                        borderRadius: BorderRadius.circular(8),
                        onTap: () {
                          setState(() {
                            _currentWeekDate = weekStart;
                          });
                          Navigator.of(context).pop();
                        },
                        child: Container(
                          width: double.infinity,
                          padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 10),
                          decoration: BoxDecoration(
                            color: isRealCurrentWeek ? activeColor.withOpacity( 0.1) : Colors.transparent,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(
                              color: isSelectedWeek ? activeColor : (isRealCurrentWeek ? Colors.grey.shade400 : Colors.grey.shade400),
                              width: 2,
                            ),
                          ),
                          child: Text.rich(
                            TextSpan(
                              children: [
                                TextSpan(
                                  text: _formatDate(weekStart),
                                  style: TextStyle(
                                    fontSize: 14,
                                    fontWeight: FontWeight.bold,
                                    color: startIsCurrentMonth ? activeColor : greyColor,
                                  ),
                                ),
                                TextSpan(
                                  text: ' ‚Äì ',
                                  style: TextStyle(
                                    fontSize: 14,
                                    fontWeight: FontWeight.bold,
                                    color: Colors.grey.shade600,
                                  ),
                                ),
                                TextSpan(
                                  text: _formatDate(weekEnd),
                                  style: TextStyle(
                                    fontSize: 14,
                                    fontWeight: FontWeight.bold,
                                    color: endIsCurrentMonth ? activeColor : greyColor,
                                  ),
                                ),
                              ],
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ),
                      ),
                    );
                  }).toList(),
                ],
              ),
            );
          }),
        );
      },
    );
  }

  void _showPowerAppsDialog() async {
    debugPrint('EVENT: powerapps_dialog_open | timestamp: ${DateTime.now()}');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    final shouldOpen = await showDialog<bool>(
      context: context,
      barrierDismissible: true,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
          child: Padding(
            padding: const EdgeInsets.all(24.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // –ö—Ä—É–ø–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º (–ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–´–ô)
                InkWell(
                  onTap: () {
                    Navigator.of(context).pop(true);
                  },
                  borderRadius: BorderRadius.circular(20),
                  child: Container(
                    width: 120,
                    height: 120,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(20),
                      gradient: const LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [
                          Color(0xFF742774),
                          Color(0xFFD946A0),
                        ],
                      ),
                    ),
                    child: const Icon(
                      Icons.apps,
                      size: 60,
                      color: Colors.white,
                    ),
                  ),
                ),
                const SizedBox(height: 20),
                // –¢–µ–∫—Å—Ç
                const Padding(
                  padding: EdgeInsets.symmetric(horizontal: 8),
                  child: Text(
                    '–û—Ç–∫—Ä—ã—Ç—å Power Apps?',
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Colors.black87,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
                const SizedBox(height: 24),
                // –ö–Ω–æ–ø–∫–∞ –û–¢–ö–†–´–¢–¨ (–° –ì–†–ê–î–ò–ï–ù–¢–û–ú)
                SizedBox(
                  width: double.infinity,
                  height: 50,
                  child: Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(25),
                      gradient: const LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [
                          Color(0xFF742774),
                          Color(0xFFD946A0),
                        ],
                      ),
                    ),
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.of(context).pop(true);
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.transparent,
                        foregroundColor: Colors.white,
                        shadowColor: Colors.transparent,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(25),
                        ),
                        elevation: 0,
                      ),
                      child: const Text(
                        '–û–¢–ö–†–´–¢–¨',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          letterSpacing: 1.2,
                        ),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–∫—Ä—ã—Ç–∏–µ
    if (shouldOpen == true) {
      debugPrint('EVENT: powerapps_launch_confirmed | timestamp: ${DateTime.now()}');
      await _launchPowerApps();
    } else {
      debugPrint('EVENT: powerapps_launch_cancelled | timestamp: ${DateTime.now()}');
    }
  }
  
  Future<void> _launchPowerApps() async {
    // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ URL —Å—Ö–µ–º –¥–ª—è PowerApps
    final powerAppsUrls = [
      Uri.parse('com.microsoft.msapps://'),
      Uri.parse('powerapps://'),
      Uri.parse('ms-apps://'),
    ];
    
    bool launched = false;
    
    for (final url in powerAppsUrls) {
      try {
        if (await canLaunchUrl(url)) {
          await launchUrl(
            url,
            mode: LaunchMode.externalApplication,
          );
          launched = true;
          debugPrint('PowerApps launched with: $url');
          break;
        }
      } catch (e) {
        debugPrint('Failed to launch with $url: $e');
        continue;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º snackbar
    if (!launched && mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Row(
            children: [
              Icon(Icons.warning_amber_rounded, color: Colors.white),
              SizedBox(width: 12),
              Expanded(child: Text('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Power Apps –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')),
            ],
          ),
          action: SnackBarAction(
            label: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
            textColor: Colors.white,
            onPressed: () async {
              debugPrint('EVENT: powerapps_install_clicked | timestamp: ${DateTime.now()}');
              final storeUrl = Uri.parse('https://play.google.com/store/apps/details?id=com.microsoft.msapps');
              try {
                await launchUrl(storeUrl, mode: LaunchMode.externalApplication);
              } catch (e) {
                debugPrint('Failed to open store URL: $e');
              }
            },
          ),
          duration: const Duration(seconds: 5),
          behavior: SnackBarBehavior.floating,
          backgroundColor: const Color(0xFFE67E22),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          margin: const EdgeInsets.only(bottom: 20, left: 20, right: 20),
        ),
      );
    }
  }
  
  void _showPowerAppsDialogOld() {
    showDialog(
      context: context,
      barrierDismissible: true,
      barrierColor: Colors.black.withOpacity( 0.6),
      builder: (context) => GestureDetector(
        onTap: () => Navigator.pop(context),
        child: Material(
          color: Colors.transparent,
          child: Center(
            child: GestureDetector(
              onTap: () {},
              child: Container(
                margin: const EdgeInsets.symmetric(horizontal: 32),
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity( 0.2),
                      blurRadius: 20,
                      offset: const Offset(0, 10),
                    ),
                  ],
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // –ü–£–ù–ö–¢ 20: –ö—Ä–µ—Å—Ç–∏–∫ —É–¥–∞–ª—ë–Ω, –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Ç–∞–ø—É –Ω–∞ —Ñ–æ–Ω
                    InkWell(
                      onTap: () {
                        Navigator.of(context).pop();
                        debugPrint('PowerApps –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è...');
                      },
                      borderRadius: BorderRadius.circular(25),
                      child: Container(
                        width: double.infinity,
                        padding: const EdgeInsets.symmetric(vertical: 8),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(25),
                          gradient: const LinearGradient(
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                            colors: [
                              Color(0xFF742774),
                              Color(0xFFD946A0),
                            ],
                          ),
                        ),
                        child: const Text(
                          '–û—Ç–∫—Ä—ã—Ç—å',
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  void _showMonthPickerDialog() {
    debugPrint('EVENT: quickjump_open | screen: month | timestamp: ${DateTime.now()}');
    final now = DateTime.now();
    int selectedYear = _monthViewDate.year;
    int selectedMonth = _monthViewDate.month;

    showGeneralDialog(
      context: context,
      barrierDismissible: true,
      barrierLabel: '',
      barrierColor: Colors.black.withOpacity( 0.5),
      transitionDuration: const Duration(milliseconds: 300),
      pageBuilder: (context, animation, secondaryAnimation) {
        return StatefulBuilder(
          builder: (context, setDialogState) {
            return ScaleTransition(
              scale: CurvedAnimation(parent: animation, curve: Curves.easeOutBack),
              child: FadeTransition(
                opacity: animation,
                child: Center(
                  child: Material(
                    color: Colors.transparent,
                    child: Container(
                      margin: const EdgeInsets.symmetric(horizontal: 24),
                      padding: const EdgeInsets.all(20),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(20),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity( 0.2),
                            blurRadius: 20,
                            offset: const Offset(0, 10),
                          ),
                        ],
                      ),
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              IconButton(
                                icon: Container(
                                  width: 36,
                                  height: 36,
                                  decoration: BoxDecoration(
                                    shape: BoxShape.circle,
                                    color: const Color(0xFF409187).withOpacity( 0.1),
                                  ),
                                  child: const Icon(Icons.chevron_left, color: Color(0xFF409187)),
                                ),
                                onPressed: () {
                                  setDialogState(() {
                                    selectedYear--;
                                  });
                                },
                              ),
                              Container(
                                padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 8),
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(20),
                                  color: selectedYear == now.year 
                                      ? const Color(0xFF409187)
                                      : Colors.grey.shade200,
                                ),
                                child: Text(
                                  '$selectedYear',
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                    color: selectedYear == now.year ? Colors.white : Colors.grey.shade700,
                                  ),
                                ),
                              ),
                              IconButton(
                                icon: Container(
                                  width: 36,
                                  height: 36,
                                  decoration: BoxDecoration(
                                    shape: BoxShape.circle,
                                    color: const Color(0xFF409187).withOpacity( 0.1),
                                  ),
                                  child: const Icon(Icons.chevron_right, color: Color(0xFF409187)),
                                ),
                                onPressed: () {
                                  setDialogState(() {
                                    selectedYear++;
                                  });
                                },
                              ),
                            ],
                          ),
                          const SizedBox(height: 20),
                          GridView.builder(
                            shrinkWrap: true,
                            physics: const NeverScrollableScrollPhysics(),
                            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                              crossAxisCount: 3,
                              childAspectRatio: 2.5,
                              crossAxisSpacing: 12,
                              mainAxisSpacing: 12,
                            ),
                            itemCount: 12,
                            itemBuilder: (context, index) {
                              final month = index + 1;
                              final isCurrentMonth = month == now.month && selectedYear == now.year;
                              final isSelected = month == selectedMonth && selectedYear == _monthViewDate.year;
                              final isCurrentYear = selectedYear == now.year;
                              
                              return InkWell(
                                onTap: () {
                                  setDialogState(() {
                                    selectedMonth = month;
                                  });
                                  setState(() {
                                    _monthViewDate = DateTime(selectedYear, month, 1);
                                  });
                                  Navigator.pop(context);
                                },
                                borderRadius: BorderRadius.circular(12),
                                child: AnimatedContainer(
                                  duration: const Duration(milliseconds: 200),
                                  curve: Curves.easeInOutCubic,
                                  decoration: BoxDecoration(
                                    color: isCurrentMonth 
                                        ? const Color(0xFF409187)
                                        : Colors.transparent,
                                    borderRadius: BorderRadius.circular(12),
                                    border: Border.all(
                                      color: isSelected 
                                          ? const Color(0xFF409187)
                                          : (isCurrentYear ? const Color(0xFF409187).withOpacity( 0.3) : Colors.grey.shade300),
                                      width: isSelected ? 2 : 1,
                                    ),
                                  ),
                                  child: Center(
                                    child: Text(
                                      DateFormat('MMM', 'ru').format(DateTime(2024, month)),
                                      style: TextStyle(
                                        fontSize: 14,
                                        fontWeight: isSelected || isCurrentMonth ? FontWeight.bold : FontWeight.normal,
                                        color: isCurrentMonth 
                                            ? Colors.white
                                            : (isCurrentYear ? const Color(0xFF409187) : Colors.grey.shade600),
                                      ),
                                    ),
                                  ),
                                ),
                              );
                            },
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            );
          },
        );
      },
    );
  }

  void _showTeacherInfo(String teacherName) {
    showDialog(
      context: context,
      barrierDismissible: true,
      barrierColor: Colors.black.withOpacity( 0.6),
      builder: (context) => GestureDetector(
        onTap: () => Navigator.pop(context),
        child: Material(
          color: Colors.transparent,
          child: Center(
            child: GestureDetector(
              onTap: () {},
              child: Container(
                margin: const EdgeInsets.symmetric(horizontal: 32),
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity( 0.2),
                      blurRadius: 20,
                      offset: const Offset(0, 10),
                    ),
                  ],
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Row(
                      children: [
                        Container(
                          width: 70,
                          height: 70,
                          decoration: BoxDecoration(
                            color: const Color(0xFF409187).withOpacity( 0.1),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: const Icon(
                            Icons.person,
                            size: 40,
                            color: Color(0xFF409187),
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: Text(
                            teacherName,
                            style: const TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: Colors.black87,
                            ),
                          ),
                        ),
                      ],
                    ),
                    const Divider(height: 24, thickness: 1),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                          InkWell(
                            onTap: () {
                              final email = '${teacherName.toLowerCase().replaceAll(' ', '.')}@university.lv';
                              ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(
                                  content: Text('–ü–æ—á—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: $email'),
                                  duration: const Duration(seconds: 2),
                                  behavior: SnackBarBehavior.floating,
                                  backgroundColor: const Color(0xFF409187).withOpacity( 0.9),
                                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                                  margin: const EdgeInsets.only(bottom: 20, left: 20, right: 20),
                                ),
                              );
                            },
                            borderRadius: BorderRadius.circular(8),
                            child: Container(
                              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                              decoration: BoxDecoration(
                                color: Colors.grey.shade100,
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  const Icon(Icons.email_outlined, size: 16, color: Color(0xFF409187)),
                                  const SizedBox(width: 8),
                                  Expanded(
                                    child: Text(
                                      '${teacherName.toLowerCase().replaceAll(' ', '.')}@university.lv',
                                      style: const TextStyle(
                                        fontSize: 12,
                                        color: Colors.black87,
                                      ),
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ),
                                  const SizedBox(width: 8),
                                  const Icon(Icons.copy, size: 14, color: Color(0xFF409187)),
                                ],
                              ),
                            ),
                          ),
                          const SizedBox(height: 16),
                          const Text(
                            '–ü—Ä–µ–ø–æ–¥–∞—ë—Ç:',
                            style: TextStyle(
                              fontSize: 14,
                              fontWeight: FontWeight.w600,
                              color: Colors.black54,
                            ),
                          ),
                          const SizedBox(height: 8),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              _buildSubjectChip('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã'),
                              const SizedBox(height: 8),
                              _buildSubjectChip('–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'),
                              const SizedBox(height: 8),
                              _buildSubjectChip('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'),
                            ],
                          ),
                        ],
                      ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSubjectChip(String subject) {
    return InkWell(
      onTap: () {
        debugPrint('EVENT: subject_tap | screen: teacher_modal | subject: $subject | timestamp: ${DateTime.now()}');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–ó–∞–≥—Ä—É–∑–∫–∞: $subject'),
            duration: const Duration(seconds: 2),
            behavior: SnackBarBehavior.floating,
            backgroundColor: const Color(0xFF409187),
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
            margin: const EdgeInsets.only(bottom: 20, left: 20, right: 20),
          ),
        );
      },
      borderRadius: BorderRadius.circular(16),
      child: Container(
        width: double.infinity,
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
        decoration: BoxDecoration(
          color: const Color(0xFF409187).withOpacity( 0.1),
          borderRadius: BorderRadius.circular(16),
          border: Border.all(
            color: const Color(0xFF409187).withOpacity( 0.3),
            width: 1,
          ),
        ),
        child: Text(
          subject,
          style: const TextStyle(
            fontSize: 14,
            color: Color(0xFF409187),
            fontWeight: FontWeight.w500,
          ),
        ),
      ),
    );
  }

    Widget _buildMiniWeekCalendar() {
      final startOfWeek = _getStartOfWeek(_currentDate);
      final endOfWeek = startOfWeek.add(const Duration(days: 6));
      final today = _normalizeDate(DateTime.now());

      final weekRangeText = '${_formatDate(startOfWeek)} - ${_formatDate(endOfWeek)}';

      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // –î–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–¥–µ–ª–∏
          Padding(
            padding: const EdgeInsets.symmetric(vertical: 6.0),
            child: Text(
              weekRangeText,
              style: const TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.bold,
                color: Colors.black87,
              ),
            ),
          ),
          // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: List.generate(7, (index) {
              final day = startOfWeek.add(Duration(days: index));
              final isToday = day == today;
              final isSelected = _selectedDay != null && day == _selectedDay;
              final isCurrentMonth = day.month == _currentDate.month;

              final dayName = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][day.weekday - 1];
              final dayNumber = day.day.toString();

              Color textColor = isCurrentMonth ? Colors.green : const Color(0xFF9E9E9E);
              if (isToday || isSelected) textColor = Colors.white;

              BoxDecoration decoration = BoxDecoration();
              if (isToday) {
                decoration = BoxDecoration(
                  color: Colors.green,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: const Color(0xFF388E3C), width: 2),
                );
              } else if (isSelected) {
                decoration = BoxDecoration(
                  color: Colors.transparent,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.green, width: 2),
                );
              }

              return Expanded(
                child: InkWell(
                  borderRadius: BorderRadius.circular(8),
                  onTap: () {
                    setState(() {
                      _selectedDay = day;
                      _currentDate = day;
                    });
                  },
                  child: Container(
                    margin: const EdgeInsets.symmetric(horizontal: 2, vertical: 4),
                    padding: const EdgeInsets.symmetric(vertical: 6),
                    decoration: decoration,
                    child: Column(
                      children: [
                        Text(
                          dayName,
                          style: TextStyle(
                            fontSize: 12,
                            fontWeight: FontWeight.bold,
                            color: textColor,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          dayNumber,
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.bold,
                            color: textColor,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              );
            }),
          ),
        ],
      );
    }

 
 
  @override
  bool get wantKeepAlive => true;

  // Helper method to get schedule for a specific date
  DailySchedule _getScheduleForDate(DateTime date) {
    final normalizedDate = _normalizeDate(date);
    
    // –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–∞—Ç–µ
    for (var schedule in fullSchedule) {
      if (_normalizeDate(schedule.date) == normalizedDate) {
        return schedule;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    return DailySchedule(
      day: DateFormat('EEEE', 'ru_RU').format(date),
      date: date,
      lessons: [],
    );
  }
  
  String _getWeekdayName(int weekday) {
    switch (weekday) {
      case DateTime.monday: return '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫';
      case DateTime.tuesday: return '–í—Ç–æ—Ä–Ω–∏–∫';
      case DateTime.wednesday: return '–°—Ä–µ–¥–∞';
      case DateTime.thursday: return '–ß–µ—Ç–≤–µ—Ä–≥';
      case DateTime.friday: return '–ü—è—Ç–Ω–∏—Ü–∞';
      case DateTime.saturday: return '–°—É–±–±–æ—Ç–∞';
      case DateTime.sunday: return '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ';
      default: return '';
    }
  }

  void _updateIndicatorPosition() {
    // –û–¢–ö–õ–Æ–ß–ï–ù–û - –≤—ã–∑—ã–≤–∞–ª–æ –æ—à–∏–±–∫–∏ attached
    // WidgetsBinding.instance.addPostFrameCallback((_) {
    //   final buttonKey = _getKeyForMode(_currentMode);
    //   final buttonRenderBox = buttonKey.currentContext?.findRenderObject() as RenderBox?;
    //   final switcherRenderBox = _switcherKey.currentContext?.findRenderObject() as RenderBox?;

    //   if (buttonRenderBox != null && switcherRenderBox != null && switcherRenderBox.hasSize) {
    //     setState(() {
    //       _indicatorWidth = buttonRenderBox.size.width - 2.5;
    //       final buttonGlobalPos = buttonRenderBox.localToGlobal(Offset.zero).dx;
    //       final switcherGlobalPos = switcherRenderBox.localToGlobal(Offset.zero).dx;
    //       _indicatorOffset = (buttonGlobalPos - switcherGlobalPos) - 4.0;
    //     });
    //   }
    // });
  }

  GlobalKey _getKeyForMode(ScheduleViewMode mode) {
    switch (mode) {
      case ScheduleViewMode.day: return _dayKey;
      case ScheduleViewMode.week: return _weekKey;
      case ScheduleViewMode.month: return _monthKey;
    }
  }

  DateTime _normalizeDate(DateTime date) {
    return DateTime(date.year, date.month, date.day);
  }

  bool _isSameDay(DateTime a, DateTime b) {
    return a.year == b.year && a.month == b.month && a.day == b.day;
  }

  void _changeDay(int delta) {
    debugPrint('EVENT: day_change | screen: day | delta: $delta | timestamp: ${DateTime.now()}');
    final oldDate = _currentDate;
    setState(() {
      _navigationDirection = delta;
      _currentDate = _normalizeDate(_currentDate.add(Duration(days: delta)));
    });
    
    _checkSkippedExams(oldDate, _currentDate);
  }
  
  void _checkSkippedExams(DateTime fromDate, DateTime toDate) {
    if ((toDate.difference(fromDate).inDays).abs() <= 1) return;
    
    _snackbarDebounceTimer?.cancel();
    _snackbarDebounceTimer = Timer(const Duration(milliseconds: 500), () {
      final start = fromDate.isBefore(toDate) ? fromDate : toDate;
      final end = fromDate.isAfter(toDate) ? fromDate : toDate;
      
      for (int i = 1; i < end.difference(start).inDays; i++) {
        final checkDate = start.add(Duration(days: i));
        final daily = _getScheduleForDate(checkDate);
        
        for (final lesson in daily.lessons) {
          if (lesson.examNote != null) {
            if (!mounted) return;
            ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  const Icon(Icons.warning_amber_rounded, color: Colors.white),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Text('–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–æ ${lesson.title}'),
                  ),
                ],
              ),
              action: SnackBarAction(
                label: '–ü–æ–∫–∞–∑–∞—Ç—å',
                textColor: Colors.white,
                onPressed: () async {
                  setState(() {
                    _currentDate = checkDate;
                  });
                  
                  // –ñ–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                  await Future.delayed(const Duration(milliseconds: 300));
                  
                  // –í–∏–±—Ä–∞—Ü–∏—è
                  final hasVibrator = await Vibration.hasVibrator() ?? false;
                  if (hasVibrator) {
                    Vibration.vibrate(duration: 200);
                  }
                  
                  // TODO: –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ —É—Ä–æ–∫—É —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π
                  // –ù—É–∂–µ–Ω ScrollController –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
                },
              ),
              duration: const Duration(seconds: 4),
              behavior: SnackBarBehavior.floating,
              backgroundColor: const Color(0xFFE67E22),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              margin: const EdgeInsets.only(bottom: 20, left: 20, right: 20),
            ),
          );
            return;
          }
        }
      }
    });
  }

  void _snapOvalToNearest() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à—É—é –≤–∫–ª–∞–¥–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ offset
    final RenderBox? renderBox = _switcherKey.currentContext?.findRenderObject() as RenderBox?;
    if (renderBox == null) return;
    
    final width = renderBox.size.width;
    final buttonWidth = (width - 6) / 3;
    
    ScheduleViewMode targetMode;
    if (_ovalDragOffset < -buttonWidth / 2) {
      // –°–≤–∞–π–ø –≤–ª–µ–≤–æ
      targetMode = _currentMode == ScheduleViewMode.month 
          ? ScheduleViewMode.week 
          : (_currentMode == ScheduleViewMode.week ? ScheduleViewMode.day : ScheduleViewMode.day);
    } else if (_ovalDragOffset > buttonWidth / 2) {
      // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ
      targetMode = _currentMode == ScheduleViewMode.day 
          ? ScheduleViewMode.week 
          : (_currentMode == ScheduleViewMode.week ? ScheduleViewMode.month : ScheduleViewMode.month);
    } else {
      // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é
      targetMode = _currentMode;
    }
    
    setState(() {
      _previousViewMode = _currentMode;
      _currentMode = targetMode;
      _ovalDragOffset = 0.0;
    });
    
    debugPrint('EVENT: oval_snap | to: $targetMode | timestamp: ${DateTime.now()}');
  }

  void _changeWeek(int delta) {
    setState(() {
      _navigationDirection = delta;
      _currentWeekDate = _currentWeekDate.add(Duration(days: delta * 7));
    });
  }

  String _formatDate(DateTime date) {
    final day = date.day.toString().padLeft(2, '0');
    final month = date.month.toString().padLeft(2, '0');
    final year = date.year.toString().substring(2);
    return '$day.$month.$year';
  }

  String _capitalize(String text) {
    if (text.isEmpty) return text;
    return text[0].toUpperCase() + text.substring(1);
  }

  DateTime _getStartOfWeek(DateTime date) {
    int diff = date.weekday - 1; 
    return _normalizeDate(date.subtract(Duration(days: diff)));
  }
  
  // ============================================================================
  // –ü–£–ù–ö–¢ 9 & 21: SnackBar –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –∫ —É—Ä–æ–∫—É
  // ============================================================================
  void _maybeShowExamSnackbar(BuildContext context, DateTime date, String examKey) {
    if (!mounted) return;
    final key = DateFormat('yyyy-MM-dd').format(date);
    if (_seenExamDates.contains(key)) return;
    _seenExamDates.add(key);

    debugPrint('EVENT: exam_snackbar_shown | date: $key | timestamp: ${DateTime.now()}');

    // –ü–£–ù–ö–¢ 11: –£–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ SnackBar
    ScaffoldMessenger.of(context).clearSnackBars();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Row(
          children: [
            Icon(Icons.warning, color: Colors.white),
            SizedBox(width: 8),
            Expanded(child: Text('–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å')),
          ],
        ),
        action: SnackBarAction(
          label: '–ü–æ–∫–∞–∑–∞—Ç—å',
          textColor: Colors.white,
          onPressed: () {
            // –ü–£–ù–ö–¢ 21: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∫—Ä–æ–ª–ª —Å GlobalKey
            final lessonKey = _examLessonKeys[examKey];
            if (lessonKey?.currentContext != null) {
              Scrollable.ensureVisible(
                lessonKey!.currentContext!,
                duration: const Duration(milliseconds: 600),
                curve: Curves.easeInOutCubic,
                alignment: 0.5, // –ü–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
              );
              debugPrint('EVENT: exam_scrolled | key: $examKey');
            } else {
              debugPrint('ERROR: exam_key_not_found | key: $examKey');
            }
          },
        ),
        duration: const Duration(seconds: 5),
        behavior: SnackBarBehavior.floating,
        backgroundColor: const Color(0xFF409187).withOpacity( 0.9),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        margin: const EdgeInsets.only(bottom: 20, left: 16, right: 16),
      ),
    );
  }

  // ============================================================================
  // –ü–£–ù–ö–¢ 13: SnackBar –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–Ω–ª–∞–π–Ω-—Å—Å—ã–ª–æ–∫
  // ============================================================================
  void _openOnlineLink(BuildContext context, String url, String classroom) async {
    if (!_openedOnlineLinks.contains(url)) {
      _openedOnlineLinks.add(url);
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            backgroundColor: const Color(0xFF409187).withOpacity( 0.18),
            content: Text('–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞: $classroom'),
            action: SnackBarAction(
              label: '–ü–µ—Ä–µ–π—Ç–∏',
              textColor: const Color(0xFF409187),
              onPressed: () {
                // –õ–æ–≥–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏
                debugPrint('EVENT: online_link_open | url: $url | timestamp: ${DateTime.now()}');
              },
            ),
            duration: const Duration(seconds: 3),
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
            margin: const EdgeInsets.only(bottom: 20, left: 16, right: 16),
          ),
        );
      }
    }
    
    // –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
    debugPrint('Opening online link: $url');
  }

  @override
  Widget build(BuildContext context) {
    super.build(context);
    const activeColor = Color(0xFF409187);

    return Scaffold( 
      appBar: AppBar(
        title: Text('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ A41', style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
        backgroundColor: activeColor,
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      body: SingleChildScrollView(
        physics: const BouncingScrollPhysics(parent: AlwaysScrollableScrollPhysics()),
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildModeSwitcher(activeColor),
              const SizedBox(height: 15),

            if (_currentMode == ScheduleViewMode.day) ...[
              _buildDayNavigator(context),
              const SizedBox(height: 12),
              _buildDayOfWeekDisplay(),
            ] else if (_currentMode == ScheduleViewMode.week)
              _buildWeekNavigator(context)
            else
              _buildMonthCalendar(context),

            const SizedBox(height: 20),

            AnimatedSwitcher(
              duration: const Duration(milliseconds: 400),
              transitionBuilder: (child, animation) {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –î–µ–Ω—å —Å–ª–µ–≤–∞ (-1), –ù–µ–¥–µ–ª—è —Ü–µ–Ω—Ç—Ä (0), –ú–µ—Å—è—Ü —Å–ø—Ä–∞–≤–∞ (1)
                double horizontalOffset = 0.0;
                
                if (_previousViewMode != _currentMode) {
                  // –î–µ–Ω—å ‚Üí –ù–µ–¥–µ–ª—è: –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∞
                  if (_currentMode == ScheduleViewMode.week && _previousViewMode == ScheduleViewMode.day) {
                    horizontalOffset = 1.0;
                  }
                  // –î–µ–Ω—å ‚Üí –ú–µ—Å—è—Ü: –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∞
                  else if (_currentMode == ScheduleViewMode.month && _previousViewMode == ScheduleViewMode.day) {
                    horizontalOffset = 1.0;
                  }
                  // –ù–µ–¥–µ–ª—è ‚Üí –î–µ–Ω—å: –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–ª–µ–≤–∞
                  else if (_currentMode == ScheduleViewMode.day && _previousViewMode == ScheduleViewMode.week) {
                    horizontalOffset = -1.0;
                  }
                  // –ù–µ–¥–µ–ª—è ‚Üí –ú–µ—Å—è—Ü: –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∞
                  else if (_currentMode == ScheduleViewMode.month && _previousViewMode == ScheduleViewMode.week) {
                    horizontalOffset = 1.0;
                  }
                  // –ú–µ—Å—è—Ü ‚Üí –ù–µ–¥–µ–ª—è: –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–ª–µ–≤–∞
                  else if (_currentMode == ScheduleViewMode.week && _previousViewMode == ScheduleViewMode.month) {
                    horizontalOffset = -1.0;
                  }
                  // –ú–µ—Å—è—Ü ‚Üí –î–µ–Ω—å: –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–ª–µ–≤–∞
                  else if (_currentMode == ScheduleViewMode.day && _previousViewMode == ScheduleViewMode.month) {
                    horizontalOffset = -1.0;
                  }
                } else {
                  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ —Ä–µ–∂–∏–º–∞ (—Å—Ç—Ä–µ–ª–∫–∏ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ)
                  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤–ª–µ–≤–æ (-1) -> –∞–Ω–∏–º–∞—Ü–∏—è –≤–ª–µ–≤–æ (-1.0), –≤–ø—Ä–∞–≤–æ (1) -> –∞–Ω–∏–º–∞—Ü–∏—è –≤–ø—Ä–∞–≤–æ (1.0)
                  horizontalOffset = _navigationDirection.toDouble();
                }
                
                final offsetAnimation = Tween<Offset>(
                  begin: Offset(horizontalOffset, 0.0),
                  end: Offset.zero,
                ).animate(CurvedAnimation(
                  parent: animation,
                  curve: Curves.easeOutCubic,
                ));
                
                return SlideTransition(
                  position: offsetAnimation,
                  child: FadeTransition(
                    opacity: animation,
                    child: child,
                  ),
                );
              },
              child: Container(
                key: ValueKey('${_currentMode}_${_currentMode == ScheduleViewMode.day ? _currentDate.toString() : _currentWeekDate.toString()}'),
                child: _currentMode == ScheduleViewMode.day || _currentMode == ScheduleViewMode.month
                    ? _buildDayScheduleList(_currentDate)
                    : _buildWeekScheduleList(),
              ),
            ),
            ],
          ),
        ),
      ),
    );
  }

  // üö® –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–ò–î–ñ–ï–¢: –°–µ—Ä—ã–π —Ñ–æ–Ω –∏ —Ç–æ—á–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
  // –í —Ñ–∞–π–ª–µ lib/schedule_page.dart –∑–∞–º–µ–Ω–∏—Ç–µ _buildModeSwitcher –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥:
// –í —Ñ–∞–π–ª–µ lib/schedule_page.dart –∑–∞–º–µ–Ω–∏—Ç–µ _buildModeSwitcher –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥:
Widget _buildModeSwitcher(Color activeColor) {
    // –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ–±–≤–æ–¥–∫–∏
    final greenBorder = const Color(0xFF409187);

    return GestureDetector(
      onHorizontalDragEnd: (details) {
        if (details.primaryVelocity! < 0) {
          // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º (–î–µ–Ω—å)
          if (_currentMode == ScheduleViewMode.week) {
            setState(() {
              _previousViewMode = _currentMode;
              _currentMode = ScheduleViewMode.day;
            });
          } else if (_currentMode == ScheduleViewMode.month) {
            setState(() {
              _previousViewMode = _currentMode;
              _currentMode = ScheduleViewMode.week;
            });
          }
        } else if (details.primaryVelocity! > 0) {
          // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–∂–∏–º (–ú–µ—Å—è—Ü)
          if (_currentMode == ScheduleViewMode.day) {
            setState(() {
              _previousViewMode = _currentMode;
              _currentMode = ScheduleViewMode.week;
            });
          } else if (_currentMode == ScheduleViewMode.week) {
            setState(() {
              _previousViewMode = _currentMode;
              _currentMode = ScheduleViewMode.month;
              if (_selectedDay != null) {
                _currentDate = _selectedDay!;
              }
            });
          }
        }
      },
      child: GestureDetector(
        onLongPressStart: (_) {
          setState(() => _isDraggingOval = true);
          debugPrint('EVENT: oval_drag_start | timestamp: ${DateTime.now()}');
        },
        onPanUpdate: (details) {
          if (_isDraggingOval) {
            setState(() {
              _ovalDragOffset += details.delta.dx;
            });
          }
        },
        onPanEnd: (_) {
          if (_isDraggingOval) {
            _snapOvalToNearest();
            setState(() => _isDraggingOval = false);
            debugPrint('EVENT: oval_drag_end | timestamp: ${DateTime.now()}');
          }
        },
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeInOut,
          key: _switcherKey,
          padding: const EdgeInsets.all(3.0),
          decoration: BoxDecoration(
            color: const Color(0xFFE0E0E0),
            borderRadius: BorderRadius.circular(30),
            border: Border.all(color: greenBorder, width: 2.5),
          ),
          child: LayoutBuilder(
            builder: (context, constraints) {
              final buttonWidth = (constraints.maxWidth - 6) / 3;
              double leftPosition;
              
              if (_isDraggingOval) {
                // –ü—Ä–∏ –¥—Ä–∞–≥–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º offset
                switch (_currentMode) {
                  case ScheduleViewMode.day:
                    leftPosition = 3 + _ovalDragOffset;
                    break;
                  case ScheduleViewMode.week:
                    leftPosition = 3 + buttonWidth + _ovalDragOffset;
                    break;
                  case ScheduleViewMode.month:
                    leftPosition = 3 + buttonWidth * 2 + _ovalDragOffset;
                    break;
                }
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                leftPosition = leftPosition.clamp(3.0, 3.0 + buttonWidth * 2);
              } else {
                // –û–±—ã—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
                switch (_currentMode) {
                  case ScheduleViewMode.day:
                    leftPosition = 3;
                    break;
                  case ScheduleViewMode.week:
                    leftPosition = 3 + buttonWidth;
                    break;
                  case ScheduleViewMode.month:
                    leftPosition = 3 + buttonWidth * 2;
                    break;
                }
              }
              
              return Stack(
                children: [
                  // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–≤–∞–ª-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                  AnimatedPositioned(
                    duration: _isDraggingOval ? Duration.zero : const Duration(milliseconds: 400),
                    curve: Curves.easeInOutCubic,
                    left: leftPosition,
                    top: 3,
                    bottom: 3,
                    width: buttonWidth,
                    child: Container(
                      decoration: BoxDecoration(
                        color: greenBorder,
                        borderRadius: BorderRadius.circular(24),
                      ),
                    ),
                  ),
                  // –ö–Ω–æ–ø–∫–∏ –ø–æ–≤–µ—Ä—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: [
                      _buildModeButton('–î–µ–Ω—å', ScheduleViewMode.day, _dayKey, greenBorder),
                      _buildModeButton('–ù–µ–¥–µ–ª—è', ScheduleViewMode.week, _weekKey, greenBorder),
                      _buildModeButton('–ú–µ—Å—è—Ü', ScheduleViewMode.month, _monthKey, greenBorder),
                    ],
                  ),
                ],
              );
            },
          ),
        ),
      ),
    );
}


  // üö® –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–ò–î–ñ–ï–¢: –ö–Ω–æ–ø–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏)
  // –í —Ñ–∞–π–ª–µ lib/schedule_page.dart –∑–∞–º–µ–Ω–∏—Ç–µ _buildModeButton –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥:
  Widget _buildModeButton(String title, ScheduleViewMode mode, GlobalKey key, Color greenBorder) {
    final isActive = _currentMode == mode;
    
    return Expanded(
      child: InkWell(
        borderRadius: BorderRadius.circular(30),
        onTap: () {
          setState(() {
            _previousViewMode = _currentMode;
            _currentMode = mode;
            if (mode == ScheduleViewMode.month && _selectedDay != null) {
              _currentDate = _selectedDay!;
            }
            _updateIndicatorPosition();
          });
        },
        child: Container(
          key: key, 
          alignment: Alignment.center,
          padding: const EdgeInsets.symmetric(vertical: 8),
          height: 40,
          child: AnimatedDefaultTextStyle(
            duration: const Duration(milliseconds: 300),
            style: TextStyle(
              color: isActive ? Colors.white : greenBorder,
              fontWeight: FontWeight.bold,
              fontSize: 14,
            ),
            child: Text(title),
          ),
        ),
      ),
    );
  }
  
  // ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã _buildDayNavigator, _buildWeekNavigator, –∏ —Ç.–¥. –Ω–∏–∂–µ)
  
  Widget _buildDayNavigator(BuildContext context) {
    final normalizedToday = _normalizeDate(DateTime.now());
    final normalizedCurrent = _currentDate;
    final isToday = normalizedCurrent.difference(normalizedToday).inDays == 0;
    final isCurrentMonth = _currentDate.month == DateTime.now().month && _currentDate.year == DateTime.now().year;
    const activeColor = Color(0xFF409187);
    const greyColor = Color(0xFF757575);

    final dateText = _formatDate(_currentDate);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –¥–∞—Ç—ã
    Color textColor;
    Color? borderColor;
    Color? backgroundColor;

    if (isToday) {
      // –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å = –∑–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç + –∑–µ–ª–µ–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ + –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
      textColor = activeColor;
      borderColor = activeColor;
      backgroundColor = activeColor.withOpacity( 0.2);
    } else if (isCurrentMonth) {
      // –î—Ä—É–≥–∏–µ –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ = –∑–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç + —Å–µ—Ä–∞—è –æ–±–≤–æ–¥–∫–∞
      textColor = activeColor;
      borderColor = greyColor;
      backgroundColor = Colors.transparent;
    } else {
      // –î—Ä—É–≥–æ–π –º–µ—Å—è—Ü = —Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç + —Å–µ—Ä–∞—è –æ–±–≤–æ–¥–∫–∞
      textColor = greyColor;
      borderColor = greyColor;
      backgroundColor = Colors.transparent;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç—Ä–µ–ª–æ–∫
    final isPrevDayToday = _normalizeDate(_currentDate.subtract(const Duration(days: 1))) == normalizedToday;
    final isNextDayToday = _normalizeDate(_currentDate.add(const Duration(days: 1))) == normalizedToday;

    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ (—Å –∫—Ä—É–≥–æ–º)
        InkWell(
          onTap: () => _changeDay(-1),
          borderRadius: BorderRadius.circular(50),
          child: AnimatedContainer(
            duration: const Duration(milliseconds: 300),
            curve: Curves.easeInOut,
            width: 44,
            height: 44,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              color: isPrevDayToday ? activeColor.withOpacity( 0.2) : Colors.transparent,
              border: Border.all(
                color: isPrevDayToday ? activeColor : Colors.grey.shade300,
                width: 2,
              ),
            ),
            child: Center(
              child: Padding(
                padding: const EdgeInsets.only(left: 4),
                child: AnimatedSwitcher(
                  duration: const Duration(milliseconds: 300),
                  child: Icon(
                    Icons.arrow_back_ios,
                    key: ValueKey(isPrevDayToday),
                    size: 18,
                    color: isPrevDayToday ? activeColor : Colors.grey.shade600,
                  ),
                ),
              ),
            ),
          ),
        ),

        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ + –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ (–æ–≤–∞–ª—å–Ω–∞—è –æ–±–≤–æ–¥–∫–∞)
        GestureDetector(
          onTap: _showDayPickerDialog,
          onHorizontalDragEnd: (details) {
            if (details.primaryVelocity! > 0) {
              setState(() => _currentMode = ScheduleViewMode.month);
            } else if (details.primaryVelocity! < 0) {
              setState(() => _currentMode = ScheduleViewMode.week);
            }
          },
          child: AnimatedContainer(
            duration: const Duration(milliseconds: 300),
            curve: Curves.easeInOut,
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            decoration: BoxDecoration(
              color: backgroundColor,
              borderRadius: BorderRadius.circular(20), // –û–≤–∞–ª—å–Ω–∞—è
              border: Border.all(color: borderColor, width: 2),
            ),
            child: AnimatedSwitcher(
              duration: const Duration(milliseconds: 400),
              transitionBuilder: (child, animation) {
                return FadeTransition(
                  opacity: animation,
                  child: SlideTransition(
                    position: Tween<Offset>(
                      begin: Offset(_navigationDirection.toDouble() * 1.0, 0),
                      end: Offset.zero,
                    ).animate(CurvedAnimation(
                      parent: animation,
                      curve: Curves.easeOutCubic,
                    )),
                    child: child,
                  ),
                );
              },
              child: Text(
                dateText,
                key: ValueKey(dateText),
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: textColor,
                ),
              ),
            ),
          ),
        ),

        // –ö–Ω–æ–ø–∫–∞ –≤–ø–µ—Ä–µ–¥ (—Å –∫—Ä—É–≥–æ–º)
        InkWell(
          onTap: () => _changeDay(1),
          borderRadius: BorderRadius.circular(50),
          child: AnimatedContainer(
            duration: const Duration(milliseconds: 300),
            curve: Curves.easeInOut,
            width: 44,
            height: 44,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              color: isNextDayToday ? activeColor.withOpacity( 0.2) : Colors.transparent,
              border: Border.all(
                color: isNextDayToday ? activeColor : Colors.grey.shade300,
                width: 2,
              ),
            ),
            child: Center(
              child: AnimatedSwitcher(
                duration: const Duration(milliseconds: 300),
                child: Icon(
                  Icons.arrow_forward_ios,
                  key: ValueKey(isNextDayToday),
                  size: 18,
                  color: isNextDayToday ? activeColor : Colors.grey.shade600,
                ),
              ),
            ),
          ),
        ),
      ],
    );
  }




  Widget _buildDayOfWeekDisplay() {
    const activeColor = Color(0xFF409187);
    final greyColor = Colors.grey.shade600;
    final dayName = DateFormat('EEEE', 'ru_RU').format(_currentDate);
    final capitalizedDayName = _capitalize(dayName);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ _currentDate —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º
    final isToday = _normalizeDate(_currentDate) == _normalizeDate(DateTime.now());
    
    return Center(
      child: AnimatedSwitcher(
        duration: const Duration(milliseconds: 400),
        transitionBuilder: (child, animation) {
          return FadeTransition(
            opacity: animation,
            child: SlideTransition(
              position: Tween<Offset>(
                begin: Offset(_navigationDirection.toDouble() * 1.0, 0),
                end: Offset.zero,
              ).animate(CurvedAnimation(
                parent: animation,
                curve: Curves.easeOutCubic,
              )),
              child: child,
            ),
          );
        },
        child: Text(
          capitalizedDayName,
          key: ValueKey(capitalizedDayName),
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: isToday ? activeColor : greyColor,
          ),
        ),
      ),
    );
  }

  Widget _buildWeekNavigator(BuildContext context) {
    const activeColor = Color(0xFF409187);
    const greyColor = Color(0xFF757575);
    final currentMonth = DateTime.now().month;
    final currentYear = DateTime.now().year;
    final normalizedToday = _normalizeDate(DateTime.now());
    
    final startOfWeek = _getStartOfWeek(_currentWeekDate);
    final endOfWeek = startOfWeek.add(const Duration(days: 6));
    
    final today = _normalizeDate(DateTime.now());
    final isCurrentWeek = today.isAfter(startOfWeek.subtract(const Duration(days: 1))) && 
                          today.isBefore(endOfWeek.add(const Duration(days: 1)));

    final color = isCurrentWeek ? activeColor : greyColor;
    final fillColor = isCurrentWeek ? activeColor.withOpacity( 0.2) : Colors.transparent;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏
    final startIsCurrentMonth = startOfWeek.month == currentMonth && startOfWeek.year == currentYear;
    final endIsCurrentMonth = endOfWeek.month == currentMonth && endOfWeek.year == currentYear;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç—Ä–µ–ª–æ–∫
    final prevWeekStart = startOfWeek.subtract(const Duration(days: 7));
    final nextWeekStart = startOfWeek.add(const Duration(days: 7));
    final isPrevWeekCurrent = normalizedToday.isAfter(prevWeekStart.subtract(const Duration(days: 1))) && 
                              normalizedToday.isBefore(prevWeekStart.add(const Duration(days: 7)));
    final isNextWeekCurrent = normalizedToday.isAfter(nextWeekStart.subtract(const Duration(days: 1))) && 
                              normalizedToday.isBefore(nextWeekStart.add(const Duration(days: 7)));

    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween, 
      children: [
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ (—Å –∫—Ä—É–≥–æ–º)
        InkWell(
          onTap: () => _changeWeek(-1),
          borderRadius: BorderRadius.circular(50),
          child: AnimatedContainer(
            duration: const Duration(milliseconds: 300),
            curve: Curves.easeInOut,
            width: 44,
            height: 44,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              color: isPrevWeekCurrent ? activeColor.withOpacity( 0.2) : Colors.transparent,
              border: Border.all(
                color: isPrevWeekCurrent ? activeColor : Colors.grey.shade300,
                width: 2,
              ),
            ),
            child: Center(
              child: Padding(
                padding: const EdgeInsets.only(left: 4),
                child: AnimatedSwitcher(
                  duration: const Duration(milliseconds: 300),
                  child: Icon(
                    Icons.arrow_back_ios,
                    key: ValueKey(isPrevWeekCurrent),
                    size: 18,
                    color: isPrevWeekCurrent ? activeColor : Colors.grey.shade600,
                  ),
                ),
              ),
            ),
          ),
        ),
        
        GestureDetector(
          onTap: _showWeekPickerDialog,
          onHorizontalDragEnd: (details) {
            if (details.primaryVelocity! > 0) {
              setState(() => _currentMode = ScheduleViewMode.day);
            } else if (details.primaryVelocity! < 0) {
              setState(() => _currentMode = ScheduleViewMode.month);
            }
          },
          child: AnimatedContainer(
              duration: const Duration(milliseconds: 300),
              curve: Curves.easeInOut,
              alignment: Alignment.center,
              padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 8), 
              decoration: BoxDecoration(
                border: Border.all(color: color, width: 2), 
                borderRadius: BorderRadius.circular(20),
                color: fillColor,
              ),
              child: AnimatedSwitcher(
                duration: const Duration(milliseconds: 400),
                transitionBuilder: (child, animation) {
                  return FadeTransition(
                    opacity: animation,
                    child: SlideTransition(
                      position: Tween<Offset>(
                        begin: Offset(_navigationDirection.toDouble() * 1.0, 0),
                        end: Offset.zero,
                      ).animate(CurvedAnimation(
                        parent: animation,
                        curve: Curves.easeOutCubic,
                      )),
                      child: child,
                    ),
                  );
                },
                child: Text.rich(
                  key: ValueKey('${_formatDate(startOfWeek)}_${_formatDate(endOfWeek)}'),
                  TextSpan(
                    children: [
                      TextSpan(
                        text: _formatDate(startOfWeek),
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: startIsCurrentMonth ? activeColor : greyColor,
                        ),
                      ),
                      TextSpan(
                        text: ' ‚Äì ',
                        style: const TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                      TextSpan(
                        text: _formatDate(endOfWeek),
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: endIsCurrentMonth ? activeColor : greyColor,
                        ),
                      ),
                    ],
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
          ),
        ),
        
        // –ö–Ω–æ–ø–∫–∞ –≤–ø–µ—Ä–µ–¥ (—Å –∫—Ä—É–≥–æ–º)
        InkWell(
          onTap: () => _changeWeek(1),
          borderRadius: BorderRadius.circular(50),
          child: AnimatedContainer(
            duration: const Duration(milliseconds: 300),
            curve: Curves.easeInOut,
            width: 44,
            height: 44,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              color: isNextWeekCurrent ? activeColor.withOpacity( 0.2) : Colors.transparent,
              border: Border.all(
                color: isNextWeekCurrent ? activeColor : Colors.grey.shade300,
                width: 2,
              ),
            ),
            child: Center(
              child: AnimatedSwitcher(
                duration: const Duration(milliseconds: 300),
                child: Icon(
                  Icons.arrow_forward_ios,
                  key: ValueKey(isNextWeekCurrent),
                  size: 18,
                  color: isNextWeekCurrent ? activeColor : Colors.grey.shade600,
                ),
              ),
            ),
          ),
        ),
      ],
    );
  }

  bool hasLessons(DateTime day) {
    final schedule = _getScheduleForDate(day);
    return schedule.lessons.isNotEmpty;
  }


  String _getWeekRange(DateTime date) {
    final startOfWeek = _getStartOfWeek(date);
    final endOfWeek = startOfWeek.add(const Duration(days: 6));
    return '${_formatDate(startOfWeek)} - ${_formatDate(endOfWeek)}';
  }

  int _getTotalLessonsForWeek(DateTime weekStart) {
    int total = 0;
    for (int i = 0; i < 7; i++) {
      final day = weekStart.add(Duration(days: i));
      final schedule = _getScheduleForDate(day);
      total += schedule.lessons.length;
    }
    return total;
  }










  Duration _getLessonDuration(String time) {
    final parts = time.split(' - ');
    if (parts.length != 2) return Duration.zero;
    
    final startParts = parts[0].split(':');
    final endParts = parts[1].split(':');
    
    final startMinutes = int.parse(startParts[0]) * 60 + int.parse(startParts[1]);
    final endMinutes = int.parse(endParts[0]) * 60 + int.parse(endParts[1]);
    
    return Duration(minutes: endMinutes - startMinutes);
  }











  Widget _buildStatChip(String label, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: color.withOpacity( 0.1),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: color.withOpacity( 0.3), width: 1),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 16, color: color),
          const SizedBox(width: 6),
          Text(
            label,
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w600,
              color: color,
            ),
          ),
          const SizedBox(width: 4),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
            decoration: BoxDecoration(
              color: color,
              borderRadius: BorderRadius.circular(10),
            ),
            child: Text(
              value,
              style: const TextStyle(
                fontSize: 11,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMonthCalendar(BuildContext context) {
    if (fullSchedule.isEmpty) return Container();

    return Column(
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            InkWell(
              onTap: () {
                setState(() {
                  _monthViewDate = DateTime(_monthViewDate.year, _monthViewDate.month - 1);
                  _focusedDay = _monthViewDate;
                });
              },
              borderRadius: BorderRadius.circular(50),
              child: Container(
                width: 44,
                height: 44,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: Colors.transparent,
                  border: Border.all(
                    color: Colors.grey.shade300,
                    width: 2,
                  ),
                ),
                child: Center(
                  child: Padding(
                    padding: const EdgeInsets.only(left: 4),
                    child: Icon(
                      Icons.arrow_back_ios,
                      size: 18,
                      color: Colors.grey.shade600,
                    ),
                  ),
                ),
              ),
            ),
            GestureDetector(
              onTap: _showMonthPickerDialog,
              onHorizontalDragEnd: (details) {
                if (details.primaryVelocity! > 0) {
                  setState(() => _currentMode = ScheduleViewMode.week);
                } else if (details.primaryVelocity! < 0) {
                  setState(() => _currentMode = ScheduleViewMode.day);
                }
              },
              child: Builder(
                builder: (context) {
                  final now = DateTime.now();
                  final isCurrentMonth = _monthViewDate.year == now.year && _monthViewDate.month == now.month;
                  final isCurrentYear = _monthViewDate.year == now.year;
                  
                  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Å—è—Ü–∞
                  Color backgroundColor;
                  Color borderColor;
                  Color textColor;
                  
                  if (isCurrentMonth) {
                    // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: —è—Ä–∫–∏–π –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω + –∑–µ–ª–µ–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ + –∑–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç
                    backgroundColor = const Color(0xFF409187).withOpacity( 0.2);
                    borderColor = const Color(0xFF409187);
                    textColor = const Color(0xFF409187);
                  } else if (isCurrentYear) {
                    // –î—Ä—É–≥–æ–π –º–µ—Å—è—Ü —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞: –±–µ–∑ —Ñ–æ–Ω–∞ + —Å–µ—Ä–∞—è –æ–±–≤–æ–¥–∫–∞ + –∑–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç
                    backgroundColor = Colors.transparent;
                    borderColor = Colors.grey.shade400;
                    textColor = const Color(0xFF409187);
                  } else {
                    // –ú–µ—Å—è—Ü –¥—Ä—É–≥–æ–≥–æ –≥–æ–¥–∞: –±–µ–∑ —Ñ–æ–Ω–∞ + —Å–µ—Ä–∞—è –æ–±–≤–æ–¥–∫–∞ + —Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
                    backgroundColor = Colors.transparent;
                    borderColor = Colors.grey.shade400;
                    textColor = Colors.grey.shade600;
                  }
                  
                  return Container(
                    padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(24),
                      border: Border.all(color: borderColor, width: 2),
                      color: backgroundColor,
                    ),
                    child: Text(
                      '${DateFormat('LLLL', 'ru').format(_monthViewDate)[0].toUpperCase()}${DateFormat('LLLL', 'ru').format(_monthViewDate).substring(1)}',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: textColor,
                      ),
                    ),
                  );
                },
              ),
            ),
            InkWell(
              onTap: () {
                setState(() {
                  _monthViewDate = DateTime(_monthViewDate.year, _monthViewDate.month + 1);
                  _focusedDay = _monthViewDate;
                });
              },
              borderRadius: BorderRadius.circular(50),
              child: Container(
                width: 44,
                height: 44,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: Colors.transparent,
                  border: Border.all(
                    color: Colors.grey.shade300,
                    width: 2,
                  ),
                ),
                child: const Center(
                  child: Icon(
                    Icons.arrow_forward_ios,
                    size: 18,
                    color: Colors.grey,
                  ),
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        // –£–±–∏—Ä–∞–µ–º GestureDetector - –ø—É—Å—Ç—å TableCalendar —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≤–∞–π–ø—ã
        Card(
            elevation: 4,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
            child: Theme(
              data: Theme.of(context).copyWith(
                splashFactory: NoSplash.splashFactory,
                splashColor: Colors.transparent,
                highlightColor: Colors.transparent,
              ),
              child: TableCalendar(
        locale: 'ru_RU',
        startingDayOfWeek: StartingDayOfWeek.monday,
        firstDay: DateTime.utc(2023, 1, 1),
        lastDay: DateTime.utc(2030, 12, 31),
        focusedDay: _focusedDay,
        calendarFormat: CalendarFormat.month,
        headerVisible: false,
        selectedDayPredicate: (day) {
          return _selectedDay != null &&
                 _selectedDay!.year == day.year &&
                 _selectedDay!.month == day.month &&
                 _selectedDay!.day == day.day;
        },
        onDaySelected: (selectedDay, focusedDay) {
          if (_selectedDay == null ||
              _selectedDay!.year != selectedDay.year ||
              _selectedDay!.month != selectedDay.month ||
              _selectedDay!.day != selectedDay.day) {
            setState(() {
              _previousSelectedDay = _selectedDay; // –ü–£–ù–ö–¢ 22: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
              _selectedDay = selectedDay;
              _focusedDay = focusedDay;
              _currentDate = selectedDay;
            });
            debugPrint('EVENT: month_day_selected | day: $selectedDay | previous: $_previousSelectedDay');
          }
        },
        onPageChanged: (focusedDay) {
          setState(() {
            _focusedDay = focusedDay;
            _monthViewDate = focusedDay; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–µ—Å—è—Ü–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
          });
        },
        calendarStyle: CalendarStyle(
          // Today –∏ Selected –±—É–¥—É—Ç –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ calendarBuilders
          todayDecoration: const BoxDecoration(
            color: Colors.transparent,
          ),
          todayTextStyle: const TextStyle(
            color: Color(0xFF409187),
            fontWeight: FontWeight.bold,
          ),
          selectedDecoration: const BoxDecoration(
            color: Colors.transparent,
          ),
          selectedTextStyle: const TextStyle(
            color: Color(0xFF409187),
            fontWeight: FontWeight.bold,
          ),
          defaultTextStyle: TextStyle(
            color: _monthViewDate.month == DateTime.now().month && _monthViewDate.year == DateTime.now().year
                ? const Color(0xFF409187) // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü - –∑–µ–ª–µ–Ω—ã–π
                : Colors.black87, // –î—Ä—É–≥–∏–µ –º–µ—Å—è—Ü—ã - —á–µ—Ä–Ω—ã–π
          ),
          weekendTextStyle: TextStyle(
            color: _monthViewDate.month == DateTime.now().month && _monthViewDate.year == DateTime.now().year
                ? const Color(0xFF409187) // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü - –∑–µ–ª–µ–Ω—ã–π
                : Colors.black87, // –î—Ä—É–≥–∏–µ –º–µ—Å—è—Ü—ã - —á–µ—Ä–Ω—ã–π
          ),
          outsideTextStyle: TextStyle(
            color: Colors.grey.shade400, // –î–Ω–∏ –¥—Ä—É–≥–∏—Ö –º–µ—Å—è—Ü–µ–≤ - —Å–µ—Ä—ã–π
          ),
          markerDecoration: const BoxDecoration(
            color: Colors.transparent,
            shape: BoxShape.circle,
          ),
        ),
        calendarBuilders: CalendarBuilders(
          todayBuilder: (context, day, focusedDay) {
            final isSelected = _selectedDay != null &&
                _selectedDay!.year == day.year &&
                _selectedDay!.month == day.month &&
                _selectedDay!.day == day.day;
            
            // –ü–£–ù–ö–¢ 22: –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤—ã–±—Ä–∞–Ω - –∑–µ–ª–µ–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞, –∏–Ω–∞—á–µ —Å–µ—Ä–∞—è —Ä–∞–º–∫–∞
            return AnimatedContainer(
              duration: const Duration(milliseconds: 300),
              curve: Curves.easeInOutCubic,
              margin: const EdgeInsets.all(4),
              decoration: BoxDecoration(
                color: isSelected 
                  ? const Color(0xFF409187) 
                  : const Color(0xFF409187).withOpacity( 0.2),
                border: Border.all(
                  color: isSelected 
                    ? const Color(0xFF409187) 
                    : Colors.grey.shade400,
                  width: 2,
                ),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Center(
                child: Text(
                  '${day.day}',
                  style: TextStyle(
                    color: isSelected ? Colors.white : const Color(0xFF409187),
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            );
          },
          selectedBuilder: (context, day, focusedDay) {
            final isToday = day.year == DateTime.now().year &&
                day.month == DateTime.now().month &&
                day.day == DateTime.now().day;
            
            if (isToday) return null; // –ò—Å–ø–æ–ª—å–∑—É–µ–º todayBuilder
            
            // –ü–£–ù–ö–¢ 22: –ó–µ–ª—ë–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
            return AnimatedContainer(
              duration: const Duration(milliseconds: 300),
              curve: Curves.easeInOutCubic,
              margin: const EdgeInsets.all(4),
              decoration: BoxDecoration(
                color: const Color(0xFF409187), // –ó–µ–ª—ë–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞
                border: Border.all(
                  color: const Color(0xFF409187),
                  width: 2,
                ),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Center(
                child: Text(
                  '${day.day}',
                  style: const TextStyle(
                    color: Colors.white, // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            );
          },
          markerBuilder: (context, day, events) {
            return null;
          },
        ),
        headerStyle: const HeaderStyle(
          formatButtonVisible: false, 
          titleCentered: true,
        ),
          ),
        ),
        ),
      ],
    );
  }

  Widget _buildDayScheduleList(DateTime date) {
    final DailySchedule daily = _getScheduleForDate(date);
    final isToday = _normalizeDate(date) == _normalizeDate(DateTime.now());
    
    if (daily.lessons.isEmpty) {
      return Padding(
        padding: const EdgeInsets.symmetric(vertical: 30.0),
        child: Center(
          child: Text(
            '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å (${daily.day}) –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç! –û—Ç–¥—ã—Ö–∞–π—Ç–µ. üòä',
            style: const TextStyle(fontSize: 20, color: Colors.black54),
            textAlign: TextAlign.center,
          ),
        ),
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º SnackBar
    final dateKey = date.toString().split(' ')[0];
    final exams = daily.lessons.where((l) => l.examNote != null).toList();
    if (exams.isNotEmpty && !_viewedExams.contains(dateKey)) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (mounted && _currentMode == ScheduleViewMode.day) {
          _viewedExams.add(dateKey);
          final examLesson = exams.first;
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(examLesson.examNote ?? '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è'),
              duration: const Duration(seconds: 5),
              behavior: SnackBarBehavior.floating,
              backgroundColor: const Color(0xFF409187).withOpacity( 0.9),
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
              margin: const EdgeInsets.only(bottom: 20, left: 20, right: 20),
              action: SnackBarAction(
                label: '–ü–æ–∫–∞–∑–∞—Ç—å',
                textColor: Colors.white,
                onPressed: () {
                  // –°–∫—Ä–æ–ª–ª–∏–º –∫ —É—Ä–æ–∫—É —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π
                  final lessonIndex = daily.lessons.indexOf(examLesson);
                  if (lessonIndex >= 0) {
                    _scrollController.animateTo(
                      lessonIndex * 200.0, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞
                      duration: const Duration(milliseconds: 600),
                      curve: Curves.easeOutCubic,
                    );
                  }
                },
              ),
            ),
          );
        }
      });
    }
    
    // –£–ë–†–ê–ù–û: –û–∫–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
        side: BorderSide(color: const Color(0xFF409187).withOpacity( 0.3), width: 2),
      ),
      child: Container(
        height: MediaQuery.of(context).size.height * 0.65,
        padding: const EdgeInsets.all(12),
        child: NotificationListener<ScrollNotification>(
          onNotification: (notification) {
            // –ü–£–ù–ö–¢ 24: Nested scroll propagation
            if (notification is ScrollUpdateNotification) {
              final position = _scrollController.position;
              
              // –î–æ—Å—Ç–∏–≥–ª–∏ –≤–µ—Ä—Ö–∞ –∏ —Ç—è–Ω–µ–º –≤–≤–µ—Ä—Ö
              if (position.pixels <= position.minScrollExtent && 
                  notification.scrollDelta! < 0) {
                debugPrint('SCROLL: propagate_up | delta: ${notification.scrollDelta}');
                return false; // –ü–µ—Ä–µ–¥–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—é
              }
              
              // –î–æ—Å—Ç–∏–≥–ª–∏ –Ω–∏–∑–∞ –∏ —Ç—è–Ω–µ–º –≤–Ω–∏–∑
              if (position.pixels >= position.maxScrollExtent && 
                  notification.scrollDelta! > 0) {
                debugPrint('SCROLL: propagate_down | delta: ${notification.scrollDelta}');
                return false; // –ü–µ—Ä–µ–¥–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—é
              }
            }
            
            if (notification is OverscrollNotification) {
              debugPrint('SCROLL: overscroll | value: ${notification.overscroll}');
              return false; // –ü–µ—Ä–µ–¥–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—é –¥–ª—è bounce —ç—Ñ—Ñ–µ–∫—Ç–∞
            }
            
            return true; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –∑–¥–µ—Å—å
          },
          child: SingleChildScrollView(
            controller: _scrollController,
            physics: const ClampingScrollPhysics(), // –ü–£–ù–ö–¢ 24: –í–∞–∂–Ω–æ –¥–ª—è nested scroll
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SizedBox(height: 10),
                ...daily.lessons.asMap().entries.map((entry) {
              final index = entry.key;
              final lesson = entry.value;
              final examKey = '${date.toString()}_${lesson.time}';
              final shouldPulse = lesson.examNote != null && !_viewedExams.contains(examKey);
              
              // –ü–£–ù–ö–¢ 21: –°–æ–∑–¥–∞—ë–º GlobalKey –¥–ª—è —É—Ä–æ–∫–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π
              final lessonKey = lesson.examNote != null 
                ? _examLessonKeys.putIfAbsent(examKey, () => GlobalKey())
                : null;
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SnackBar –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–Ω—è —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π
              if (lesson.examNote != null && !_seenExamDates.contains(DateFormat('yyyy-MM-dd').format(date))) {
                WidgetsBinding.instance.addPostFrameCallback((_) {
                  _maybeShowExamSnackbar(context, date, examKey);
                });
              }
              
              // –ü–£–ù–ö–¢ 27: RepaintBoundary –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
              return RepaintBoundary(
                key: lessonKey, // –ü–£–ù–ö–¢ 21: GlobalKey –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
                child: LessonTile(
                  key: ValueKey('lesson_day_${date}_$index'), // –ü–£–ù–ö–¢ 27: ValueKey
                  time: lesson.time,
                  title: lesson.title, 
                  teacher: lesson.teacher,
                  classroom: lesson.classroom,
                  baseColor: lesson.baseColor,
                  type: lesson.type, 
                  format: lesson.format,
                  isToday: isToday,
                  onPowerAppsPressed: _showPowerAppsDialog,
                  onTeacherTap: () => _showTeacherInfo(lesson.teacher),
                  examNote: lesson.examNote,
                  shouldPulse: shouldPulse,
                  lessonNumber: index + 1,
                  deepLink: lesson.deepLink,
                ),
              );
            }).toList(),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildWeekDayTimer(DailySchedule dailySchedule, bool isToday, Color activeColor, int lessonCount) {
    if (!isToday || dailySchedule.lessons.isEmpty) {
      // –û–±—ã—á–Ω—ã–π –∫—Ä—É–≥ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—Ä–æ–∫–æ–≤
      return Container(
        width: 32,
        height: 32,
        decoration: BoxDecoration(
          color: isToday ? activeColor.withOpacity( 0.2) : Colors.transparent,
          shape: BoxShape.circle,
          border: Border.all(
            color: isToday ? activeColor : Colors.grey.shade400,
            width: 2,
          ),
        ),
        child: Center(
          child: Text(
            '$lessonCount',
            style: TextStyle(
              color: isToday ? activeColor : Colors.grey.shade600,
              fontSize: 14,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      );
    }

    // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –¢–ê–ô–ú–ï–† –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
    return _WeekDayTimerWidget(
      dailySchedule: dailySchedule,
      activeColor: activeColor,
      lessonCount: lessonCount,
    );
  }

  Widget _buildWeekScheduleList() {
    final today = _normalizeDate(DateTime.now());
    const activeColor = Color(0xFF409187);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    final startOfWeek = _getStartOfWeek(_currentWeekDate);
    final endOfWeek = startOfWeek.add(const Duration(days: 6));
    final weekSchedule = fullSchedule.where((schedule) {
      final date = _normalizeDate(schedule.date);
      return date.isAfter(startOfWeek.subtract(const Duration(days: 1))) &&
             date.isBefore(endOfWeek.add(const Duration(days: 1)));
    }).toList();

    // –ü–£–ù–ö–¢ 12: PageStorageKey –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–≤
    return Column(
      key: PageStorageKey('week_list_${_currentWeekDate.toIso8601String()}'),
      children: weekSchedule.map((dailySchedule) {
        final normalizedDate = _normalizeDate(dailySchedule.date);
        final isToday = normalizedDate == today;
        final lessonCount = dailySchedule.lessons.length;
        final tileKeyStr = '${dailySchedule.date}';
        final globalKey = _tileKeys.putIfAbsent(tileKeyStr, () => GlobalKey());

        // –ü–£–ù–ö–¢ 12: KeyedSubtree –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ rebuild
        return KeyedSubtree(
          key: ValueKey(dailySchedule.date.toIso8601String()),
          child: WeekCollapsible(
            key: ValueKey('collapsible_${dailySchedule.date}'),
          collapsibleKey: globalKey,
          isCurrentDay: isToday, // –ü–£–ù–ö–¢ 1: –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–ª–∞–≥ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
          initiallyExpanded: _expandedTiles.contains(tileKeyStr),
          onExpansionChanged: (expanded) async {
            if (expanded) {
              setState(() => _expandedTiles.add(tileKeyStr));
              // –ü–£–ù–ö–¢ 8: –í–∏–±—Ä–∞—Ü–∏—è –¢–û–õ–¨–ö–û –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –¥–Ω—è —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π + debounce
              final hasExam = dailySchedule.lessons.any((l) => l.examNote != null);
              if (hasExam && !_vibrationFiredForDate.contains(tileKeyStr)) {
                final hasVibrator = await Vibration.hasVibrator() ?? false;
                if (hasVibrator) {
                  Vibration.vibrate(duration: 160);
                  _vibrationFiredForDate.add(tileKeyStr);
                  debugPrint('VIBRATION: fired | date: $tileKeyStr | hasExam: true');
                }
              }
            } else {
              setState(() => _expandedTiles.remove(tileKeyStr));
              // –°–∫—Ä–æ–ª–ª –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
              await Future.delayed(const Duration(milliseconds: 800));
              if (globalKey.currentContext != null && mounted) {
                await Scrollable.ensureVisible(
                  globalKey.currentContext!,
                  duration: const Duration(milliseconds: 600),
                  curve: Curves.easeOutCubic,
                  alignmentPolicy: ScrollPositionAlignmentPolicy.keepVisibleAtStart,
                );
              }
            }
          },
          header: Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
              color: isToday ? activeColor.withOpacity( 0.15) : Colors.white,
              borderRadius: BorderRadius.circular(20),
            ),
            child: Row(
              children: [
                Expanded(
                  child: Text(
                    dailySchedule.day,
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                      color: isToday ? activeColor : Colors.grey.shade700,
                    ),
                  ),
                ),
                _buildWeekDayTimer(dailySchedule, isToday, activeColor, lessonCount),
                const SizedBox(width: 8),
                Text(
                  _formatDate(dailySchedule.date),
                  style: TextStyle(
                    fontSize: 15,
                    fontWeight: FontWeight.bold,
                    color: isToday 
                      ? activeColor 
                      : (normalizedDate.month == DateTime.now().month && normalizedDate.year == DateTime.now().year
                          ? activeColor 
                          : Colors.grey.shade600),
                  ),
                ),
                const SizedBox(width: 8),
                Icon(
                  _expandedTiles.contains(tileKeyStr) ? Icons.keyboard_arrow_up : Icons.keyboard_arrow_down,
                  color: isToday ? activeColor : Colors.grey.shade600,
                ),
              ],
            ),
          ),
          children: dailySchedule.lessons.isEmpty
              ? [
                  const Padding(
                    padding: EdgeInsets.all(16.0),
                    child: Text('–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç', style: TextStyle(color: Colors.black54)),
                  ),
                ]
              : dailySchedule.lessons.asMap().entries.map((entry) {
                  final index = entry.key;
                  final lesson = entry.value;
                  final examKey = '${dailySchedule.date.toString()}_${lesson.time}';
                  final shouldPulse = lesson.examNote != null && !_viewedExams.contains(examKey);
                  
                  // –ü–£–ù–ö–¢ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º staggered –∞–Ω–∏–º–∞—Ü–∏—é
                  return TweenAnimationBuilder<double>(
                    key: ValueKey('lesson_${dailySchedule.date}_$index'),
                    duration: Duration(milliseconds: 400 + (index * 100)),
                    tween: Tween(begin: 0.0, end: 1.0),
                    curve: Curves.easeOut,
                    builder: (context, value, child) {
                      return Opacity(
                        opacity: value,
                        child: Transform.translate(
                          offset: Offset(0, 20 * (1 - value)),
                          child: child,
                        ),
                      );
                    },
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                      child: RepaintBoundary(
                        child: LessonTile(
                          time: lesson.time,
                          title: lesson.title,
                          teacher: lesson.teacher,
                          classroom: lesson.classroom,
                          baseColor: lesson.baseColor,
                          type: lesson.type,
                          format: lesson.format,
                          isToday: isToday,
                          onPowerAppsPressed: _showPowerAppsDialog,
                          onTeacherTap: () => _showTeacherInfo(lesson.teacher),
                          examNote: lesson.examNote,
                          shouldPulse: shouldPulse,
                          lessonNumber: index + 1,
                          deepLink: lesson.deepLink,
                        ),
                      ),
                    ),
                  );
                }).toList(),
          ), // –ü–£–ù–ö–¢ 12: –ó–∞–∫—Ä—ã–≤–∞–µ–º WeekCollapsible
        ), // –ü–£–ù–ö–¢ 12: –ó–∞–∫—Ä—ã–≤–∞–µ–º KeyedSubtree
        );
      }).toList(),
    ); // –ü–£–ù–ö–¢ 12: –ó–∞–∫—Ä—ã–≤–∞–µ–º Column —Å PageStorageKey
  }




}

class LessonTile extends StatefulWidget {
  final String time; 
  final String title; 
  final String teacher;
  final String classroom;
  final Color baseColor;
  final LessonType type; 
  final LessonFormat format;
  final bool isToday;
  final VoidCallback? onPowerAppsPressed;
  final VoidCallback? onTeacherTap;
  final String? examNote;
  final bool shouldPulse;
  final int lessonNumber; // –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –≤ –¥–Ω–µ
  final String deepLink;

  const LessonTile({
    super.key,
    required this.time,
    required this.title,
    required this.teacher,
    required this.classroom,
    required this.baseColor,
    required this.type,
    required this.format,
    this.isToday = false,
    this.onPowerAppsPressed,
    this.onTeacherTap,
    this.examNote,
    this.shouldPulse = false,
    required this.lessonNumber,
    this.deepLink = '',
  });

  @override
  State<LessonTile> createState() => _LessonTileState();
}

class _LessonTileState extends State<LessonTile> with TickerProviderStateMixin {
  late AnimationController _pulseController;
  late Animation<double> _pulseAnimation;
  late AnimationController _borderController;
  bool _isLoading = false;
  bool _isPressedTitle = false;
  Timer? _longPressTimer;

  @override
  void initState() {
    super.initState();
    _pulseController = AnimationController(
      duration: const Duration(milliseconds: 150),
      vsync: this,
    );
    // 3D –∞–Ω–∏–º–∞—Ü–∏—è: scale –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫ —ç–∫—Ä–∞–Ω—É
    _pulseAnimation = Tween<double>(begin: 1.0, end: 1.15).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeOut),
    );
    
    _borderController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );

    if (widget.shouldPulse && widget.examNote != null) {
      _startPulseWithVibration();
    }
  }

  Future<void> _startPulseWithVibration() async {
    debugPrint('EVENT: exam_pulse_start | timestamp: ${DateTime.now()}');
    final hasVibrator = await Vibration.hasVibrator() ?? false;
    
    // 2 —Å–µ—Ä–∏–∏ –ø–æ 3 –∏–º–ø—É–ª—å—Å–∞ —Å bounce —ç—Ñ—Ñ–µ–∫—Ç–æ–º
    for (int series = 0; series < 2; series++) {
      // 3 –∏–º–ø—É–ª—å—Å–∞ –∑–∞ 1.0 —Å–µ–∫—É–Ω–¥—É
      for (int i = 0; i < 3; i++) {
        if (hasVibrator) Vibration.vibrate(duration: 40);
        await _pulseController.forward(from: 0);
        await _pulseController.reverse();
        await Future.delayed(const Duration(milliseconds: 150));
      }
      
      // –ü–∞—É–∑–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–µ—Ä–∏—è–º–∏
      if (series == 0) {
        await Future.delayed(const Duration(milliseconds: 1500));
      }
    }
    
    debugPrint('EVENT: exam_pulse_end | timestamp: ${DateTime.now()}');
  }

  @override
  void dispose() {
    _longPressTimer?.cancel();
    _pulseController.dispose();
    _borderController.dispose();
    super.dispose();
  }

  Map<String, dynamic> _getLessonStyle() {
    switch (widget.type) {
      case LessonType.online:
        return {'icon': Icons.laptop_windows, 'color': const Color.fromARGB(255, 27, 79, 114)};
      case LessonType.exam:
        return {'icon': Icons.assignment, 'color': const Color.fromARGB(255, 52, 152, 219)};
      case LessonType.changed:
        return {'icon': Icons.warning_amber, 'color': const Color.fromARGB(255, 230, 126, 34)};
      case LessonType.regular:
      default:
        return {'icon': Icons.menu_book, 'color': const Color(0xFF409187)};
    }
  }

  String _getFormatText() {
    switch (widget.format) {
      case LessonFormat.lecture: return 'LECT';
      case LessonFormat.practice: return 'PRAC';
      case LessonFormat.lab: return 'LAB';
      default: return 'LECT';
    }
  }

  Widget _buildLegendItem(Color color, String label) {
    return Row(
      children: [
        Container(
          width: 40,
          height: 40,
          decoration: BoxDecoration(
            color: color,
            shape: BoxShape.circle,
          ),
        ),
        const SizedBox(width: 12),
        const Text(
          '‚Äî',
          style: TextStyle(fontSize: 20, color: Colors.grey),
        ),
        const SizedBox(width: 12),
        Text(
          label,
          style: const TextStyle(fontSize: 16),
        ),
      ],
    );
  }

  void _showLessonTypeBottomSheet(BuildContext context, Color typeColor) {
    debugPrint('EVENT: lesson_legend_opened | timestamp: ${DateTime.now()}');
    
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => Container(
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
        ),
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text(
                  '–õ–µ–≥–µ–Ω–¥–∞ —Ç–∏–ø–æ–≤ —É—Ä–æ–∫–æ–≤',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                ),
                // –ü–£–ù–ö–¢ 20: –ö—Ä–µ—Å—Ç–∏–∫ —É–¥–∞–ª—ë–Ω, –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Å–≤–∞–π–ø—É –≤–Ω–∏–∑
              ],
            ),
            const SizedBox(height: 20),
            
            // –ü–û–õ–ù–ê–Ø –õ–ï–ì–ï–ù–î–ê –í–°–ï–• –¢–ò–ü–û–í
            _buildLegendRow(
              context,
              '–û–±—ã—á–Ω—ã–π —É—Ä–æ–∫',
              Icons.menu_book,
              const Color(0xFF409187),
              '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏',
            ),
            const SizedBox(height: 16),
            _buildLegendRow(
              context,
              '–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ',
              Icons.laptop_windows,
              const Color.fromARGB(255, 27, 79, 114),
              '–û–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏–µ —á–µ—Ä–µ–∑ Zoom/Teams',
            ),
            const SizedBox(height: 16),
            _buildLegendRow(
              context,
              '–≠–∫–∑–∞–º–µ–Ω',
              Icons.assignment,
              const Color.fromARGB(255, 52, 152, 219),
              '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏–ª–∏ —ç–∫–∑–∞–º–µ–Ω',
            ),
            const SizedBox(height: 16),
            _buildLegendRow(
              context,
              '–ò–∑–º–µ–Ω–µ–Ω–æ',
              Icons.warning_amber,
              const Color.fromARGB(255, 230, 126, 34),
              '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏',
            ),
            const SizedBox(height: 24),
            
            // –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () => Navigator.pop(context),
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF409187),
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 14),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: const Text(
                  '–ó–∞–∫—Ä—ã—Ç—å',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildLegendRow(BuildContext context, String title, IconData icon, Color color, String description) {
    return Row(
      children: [
        Container(
          width: 50,
          height: 50,
          decoration: BoxDecoration(
            color: color,
            shape: BoxShape.circle,
          ),
          child: Icon(icon, color: Colors.white, size: 26),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: color,
                ),
              ),
              const SizedBox(height: 2),
              Text(
                description,
                style: const TextStyle(
                  fontSize: 13,
                  color: Colors.grey,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  // –ù–û–í–û–ï –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ü–†–ò –ö–õ–ò–ö–ï –ù–ê –í–†–ï–ú–Ø
  void _showLessonDetailsDialog(BuildContext context, Color typeColor) {
    showGeneralDialog(
      context: context,
      barrierDismissible: true,
      barrierLabel: '',
      barrierColor: Colors.black54,
      transitionDuration: const Duration(milliseconds: 300),
      pageBuilder: (context, anim1, anim2) {
        return LessonDetailsDialog(
          lessonNumber: widget.lessonNumber,
          title: widget.title,
          timeRange: widget.time,
          color: typeColor,
        );
      },
      transitionBuilder: (context, anim1, anim2, child) {
        return FadeTransition(
          opacity: anim1,
          child: ScaleTransition(
            scale: Tween<double>(begin: 0.8, end: 1.0).animate(
              CurvedAnimation(parent: anim1, curve: Curves.easeOutCubic),
            ),
            child: child,
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final style = _getLessonStyle();
    final typeColor = style['color'] as Color;
    final formatText = _getFormatText();

    return InkWell(
      onLongPress: () => _showLessonTypeBottomSheet(context, typeColor),
      borderRadius: BorderRadius.circular(12),
      child: Card(
        elevation: 5, 
        color: widget.baseColor, 
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        margin: const EdgeInsets.only(bottom: 16), 
        clipBehavior: Clip.antiAlias,
        child: Column(
          children: [
          // 1. –¶–í–ï–¢–ù–û–ô –í–ï–†–•–ù–ò–ô –ë–ê–†
          GestureDetector(
            onLongPress: () {
              showModalBottomSheet(
                context: context,
                shape: const RoundedRectangleBorder(
                  borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
                ),
                builder: (context) => Container(
                  padding: const EdgeInsets.all(20),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        '–õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤',
                        style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                      ),
                      const SizedBox(height: 20),
                      _buildLegendItem(const Color(0xFF409187), '–û–±—ã—á–Ω—ã–π —É—Ä–æ–∫'),
                      const SizedBox(height: 12),
                      _buildLegendItem(const Color.fromARGB(255, 27, 79, 114), '–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ'),
                      const SizedBox(height: 12),
                      _buildLegendItem(const Color.fromARGB(255, 52, 152, 219), '–≠–∫–∑–∞–º–µ–Ω'),
                      const SizedBox(height: 12),
                      _buildLegendItem(const Color.fromARGB(255, 230, 126, 34), '–ò–∑–º–µ–Ω–µ–Ω–æ'),
                      const SizedBox(height: 20),
                    ],
                  ),
                ),
              );
            },
            child: Container(
              height: 40,
              decoration: BoxDecoration(
                color: typeColor, 
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(12),
                  topRight: Radius.circular(12),
                ),
              ),
              child: Stack(
                children: [
                  // –õ–ï–í–ê–Ø –ó–û–ù–ê: –¢–∏–ø —É—Ä–æ–∫–∞ (—Å—Ç—Ä–æ–≥–æ –≤ –ª–µ–≤–æ–º —É–≥–ª—É)
                  Positioned(
                    left: 0,
                    top: 0,
                    bottom: 0,
                    child: Row(
                      children: [
                        InkWell(
                          onTap: () => _showLessonTypeBottomSheet(context, typeColor),
                          child: Container(
                            padding: const EdgeInsets.only(left: 12, right: 8, top: 6, bottom: 6),
                            child: Text(
                              formatText,
                              style: const TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.w700,
                                fontSize: 15,
                              ),
                            ),
                          ),
                        ),
                        if (widget.type == LessonType.online)
                          Padding(
                            padding: const EdgeInsets.only(left: 4),
                            child: InkWell(
                              onTap: () {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text('–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è: ${widget.classroom}'),
                                    duration: const Duration(seconds: 2),
                                    behavior: SnackBarBehavior.floating,
                                    backgroundColor: const Color(0xFF409187).withOpacity( 0.85),
                                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                                    margin: const EdgeInsets.only(bottom: 20, left: 20, right: 20),
                                  ),
                                );
                              },
                              child: Container(
                                width: 24,
                                height: 24,
                                decoration: BoxDecoration(
                                  color: Colors.white.withOpacity( 0.2),
                                  borderRadius: BorderRadius.circular(4),
                                  border: Border.all(color: Colors.white, width: 1),
                                ),
                                child: const Icon(Icons.videocam, color: Colors.white, size: 14),
                              ),
                            ),
                          ),
                      ],
                    ),
                  ),
                  
                  // –¶–ï–ù–¢–†–ê–õ–¨–ù–ê–Ø –ó–û–ù–ê: –í—Ä–µ–º—è (—Å—Ç–∞—Ç–∏—á–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É)
                  Center(
                    child: InkWell(
                      onTap: () => _showLessonDetailsDialog(context, typeColor),
                      borderRadius: BorderRadius.circular(8),
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                        child: Text(
                          widget.time,
                          textAlign: TextAlign.center,
                          style: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 15,
                          ),
                        ),
                      ),
                    ),
                  ),
                  
                  // –ü–†–ê–í–ê–Ø –ó–û–ù–ê: –ò–∫–æ–Ω–∫–∞ —É—Ä–æ–∫–∞ + PowerApps (—Å—Ç–∞—Ç–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∞)
                  Positioned(
                    right: 0,
                    top: 0,
                    bottom: 0,
                    child: Padding(
                      padding: const EdgeInsets.only(right: 12),
                      child: Row(
                        children: [
                          Icon(style['icon'] as IconData, color: Colors.white, size: 20),
                        if (widget.isToday) ...[
                          const SizedBox(width: 8),
                        InkWell(
                          onTap: () async {
                            try {
                              final packageUrl = Uri.parse('com.microsoft.msapps://open');
                              if (await canLaunchUrl(packageUrl)) {
                                await launchUrl(packageUrl, mode: LaunchMode.externalApplication);
                                return;
                              }
                              if (widget.deepLink.isNotEmpty) {
                                final url = Uri.parse(widget.deepLink);
                                if (await canLaunchUrl(url)) {
                                  await launchUrl(url, mode: LaunchMode.externalApplication);
                                  return;
                                }
                              }
                              final webUrl = Uri.parse('https://make.powerapps.com/');
                              if (await canLaunchUrl(webUrl)) {
                                await launchUrl(webUrl, mode: LaunchMode.externalApplication);
                                if (context.mounted) {
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    const SnackBar(content: Text('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–∫—Ä—ã—Ç–∞ –≤–µ–±-–≤–µ—Ä—Å–∏—è'), duration: Duration(seconds: 3)),
                                  );
                                }
                                return;
                              }
                              if (context.mounted) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: const Text('PowerApps –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ Google Play'),
                                    duration: const Duration(seconds: 4),
                                    action: SnackBarAction(label: 'OK', onPressed: () {}),
                                  ),
                                );
                              }
                            } catch (e) {
                              debugPrint('Error launching PowerApps: $e');
                              if (context.mounted) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(content: Text('–û—à–∏–±–∫–∞: $e'), duration: const Duration(seconds: 3)),
                                );
                              }
                            }
                          },
                          child: Container(
                            width: 28,
                            height: 28,
                            decoration: BoxDecoration(
                              color: Colors.white.withOpacity( 0.2),
                              borderRadius: BorderRadius.circular(6),
                              border: Border.all(color: Colors.white, width: 1),
                            ),
                            child: Center(
                              child: Container(
                                width: 20,
                                height: 20,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(4),
                                  gradient: const LinearGradient(
                                    begin: Alignment.topLeft,
                                    end: Alignment.bottomRight,
                                    colors: [Color(0xFF742774), Color(0xFFD946A0)],
                                  ),
                                ),
                                child: const Icon(Icons.apps, size: 12, color: Colors.white),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ],
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),

          // 2. –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ô –ë–õ–û–ö
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(14.0),
            decoration: BoxDecoration(
              color: Colors.white, 
              borderRadius: const BorderRadius.only(
                bottomLeft: Radius.circular(12),
                bottomRight: Radius.circular(12),
              ),
              border: Border.all(color: typeColor, width: 2), 
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // –ù–ê–ó–í–ê–ù–ò–ï –ü–†–ï–î–ú–ï–¢–ê –í –†–ê–ú–ö–ï –° –ò–ö–û–ù–ö–û–ô
                GestureDetector(
                  onTap: () {
                    // –ü—Ä–æ—Å—Ç–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                    setState(() {
                      _isLoading = !_isLoading;
                      if (_isLoading) {
                        _borderController.repeat();
                      } else {
                        _borderController.stop();
                        _borderController.reset();
                      }
                      debugPrint('EVENT: lesson_title_tap | lesson: ${widget.title} | timestamp: ${DateTime.now()}');
                    });
                  },
                  onTapDown: (_) {
                    setState(() => _isPressedTitle = true);
                  },
                  onTapUp: (_) {
                    setState(() => _isPressedTitle = false);
                  },
                  onTapCancel: () {
                    setState(() => _isPressedTitle = false);
                  },
                  child: AnimatedScale(
                    scale: _isPressedTitle ? 0.95 : 1.0,
                    duration: const Duration(milliseconds: 150),
                    curve: Curves.easeOut,
                    child: CustomPaint(
                      painter: _isLoading ? _BorderLoadingPainter(
                        progress: _borderController.value,
                        color: typeColor,
                      ) : null,
                      child: Container(
                      padding: const EdgeInsets.symmetric(horizontal: 18, vertical: 14),
                      decoration: BoxDecoration(
                        border: Border.all(
                          color: typeColor,
                          width: 2,
                        ),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Row(
                        children: [
                          Expanded(
                            child: Text(
                              widget.title,
                              style: const TextStyle(fontSize: 22, fontWeight: FontWeight.w700),
                            ),
                          ),
                          const SizedBox(width: 8),
                          AnimatedSwitcher(
                            duration: const Duration(milliseconds: 200),
                            child: _isLoading
                                ? const SizedBox(
                                    key: ValueKey('loading'),
                                    width: 20,
                                    height: 20,
                                  )
                                : const Text(
                                    'üéì',
                                    key: ValueKey('emoji'),
                                    style: TextStyle(fontSize: 20),
                                  ),
                          ),
                        ],
                      ),
                    ),
                    ),
                  ),
                ),
                
                // –†–ê–ó–î–ï–õ–ò–¢–ï–õ–¨
                const Divider(height: 20, thickness: 1, color: Colors.black12),
                
                // –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨
                InkWell(
                  onTap: widget.onTeacherTap,
                  borderRadius: BorderRadius.circular(8),
                  child: Padding(
                    padding: const EdgeInsets.symmetric(vertical: 4),
                    child: Row(
                      children: [
                        const Icon(Icons.person_outline, size: 18, color: Colors.black54),
                        const SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            widget.teacher, 
                            style: const TextStyle(color: Colors.black87)
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 5),
                
                // –ê–£–î–ò–¢–û–†–ò–Ø/–ê–î–†–ï–° (–ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–ê–Ø –î–õ–Ø –û–ù–õ–ê–ô–ù –ò GOOGLE MAPS)
                Row(
                  children: [
                    const Icon(Icons.location_on_outlined, size: 18, color: Colors.black54),
                    const SizedBox(width: 8),
                    Expanded(
                      child: widget.type == LessonType.online
                          ? InkWell(
                              onTap: () {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text('–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è: ${widget.classroom}'),
                                    duration: const Duration(seconds: 3),
                                    behavior: SnackBarBehavior.floating,
                                    backgroundColor: const Color(0xFF409187).withOpacity( 0.85),
                                    dismissDirection: DismissDirection.down,
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(12),
                                    ),
                                    margin: const EdgeInsets.only(bottom: 20, left: 20, right: 20),
                                  ),
                                );
                              },
                              child: Text(
                                widget.classroom,
                                style: const TextStyle(
                                  color: Colors.blue,
                                  decoration: TextDecoration.underline,
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                            )
                          : Row(
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                InkWell(
                                  onTap: () async {
                                    final address = '–õ–æ–º–æ–Ω–æ—Å–æ–≤–∞ 27, –†–∏–≥–∞, –õ–∞—Ç–≤–∏—è';
                                    final encodedAddress = Uri.encodeComponent(address);
                                    final url = Uri.parse('geo:0,0?q=$encodedAddress');
                                    if (await canLaunchUrl(url)) {
                                      await launchUrl(url, mode: LaunchMode.externalApplication);
                                    } else {
                                      final webUrl = Uri.parse('https://www.google.com/maps/search/?api=1&query=$encodedAddress');
                                      await launchUrl(webUrl, mode: LaunchMode.externalApplication);
                                    }
                                  },
                                  child: const Text('–õ–æ–º–æ–Ω–æ—Å–æ–≤–∞ 27', style: TextStyle(color: Colors.black87, fontSize: 13)),
                                ),
                                Container(margin: const EdgeInsets.symmetric(horizontal: 8), width: 1, height: 14, color: Colors.grey.shade400),
                                Text(widget.classroom, style: const TextStyle(color: Color(0xFF424242), fontWeight: FontWeight.bold, fontSize: 13)),
                              ],
                            ),
                    ),
                  ],
                ),
                
                // –ë–õ–û–ö –ö–û–ù–¢–†–û–õ–¨–ù–û–ô –†–ê–ë–û–¢–´ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if (widget.examNote != null) ...[
                  const SizedBox(height: 12),
                  const Divider(height: 1, thickness: 1, color: Colors.black12),
                  const SizedBox(height: 12),
                  Container(
                    padding: const EdgeInsets.all(12),
                    clipBehavior: Clip.hardEdge,
                    decoration: BoxDecoration(
                      color: const Color(0xFF409187).withOpacity( 0.15),
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: const Color(0xFF409187), width: 2),
                    ),
                    child: AnimatedBuilder(
                      animation: _pulseAnimation,
                      builder: (context, child) {
                        // 3D —ç—Ñ—Ñ–µ–∫—Ç: –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∫ —ç–∫—Ä–∞–Ω—É)
                        return Transform(
                          transform: Matrix4.identity()
                            ..setEntry(3, 2, 0.001) // perspective
                            ..scale(_pulseAnimation.value, _pulseAnimation.value, 1.0),
                          alignment: Alignment.center,
                          child: child,
                        );
                      },
                      child: Row(
                        children: [
                          const Icon(Icons.description_outlined, color: Color(0xFF409187), size: 24),
                          const SizedBox(width: 12),
                          Expanded(
                            child: Text(
                              widget.examNote!,
                              style: const TextStyle(
                                color: Color(0xFF2C6B63),
                                fontWeight: FontWeight.bold,
                                fontSize: 15,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ],
            ),
          ),
        ],
      ),
      ),
    );
  }
}

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–µ—Ä —É—Ä–æ–∫–∞ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
class LessonTimer extends StatefulWidget {
  final String timeRange; // "08:30 - 10:00"
  final int lessonNumber; // –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –≤ –¥–Ω–µ
  final Color color;

  const LessonTimer({
    super.key,
    required this.timeRange,
    required this.lessonNumber,
    required this.color,
  });

  @override
  State<LessonTimer> createState() => _LessonTimerState();
}

class _LessonTimerState extends State<LessonTimer> {
  Timer? _timer;
  double _progress = 0.0;

  @override
  void initState() {
    super.initState();
    _updateProgress();
    _timer = Timer.periodic(const Duration(seconds: 1), (_) {
      if (mounted) {
        _updateProgress();
      }
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  void _updateProgress() {
    final now = DateTime.now();
    final times = widget.timeRange.split(' - ');
    if (times.length != 2) return;

    try {
      final startParts = times[0].split(':');
      final endParts = times[1].split(':');
      
      final startTime = DateTime(
        now.year,
        now.month,
        now.day,
        int.parse(startParts[0]),
        int.parse(startParts[1]),
      );
      
      final endTime = DateTime(
        now.year,
        now.month,
        now.day,
        int.parse(endParts[0]),
        int.parse(endParts[1]),
      );

      if (now.isBefore(startTime)) {
        setState(() => _progress = 0.0);
      } else if (now.isAfter(endTime)) {
        setState(() => _progress = 1.0);
      } else {
        final total = endTime.difference(startTime).inSeconds;
        final elapsed = now.difference(startTime).inSeconds;
        setState(() => _progress = elapsed / total);
      }
    } catch (e) {
      debugPrint('Error parsing time: $e');
    }
  }

  void _showDetailDialog() {
    showGeneralDialog(
      context: context,
      barrierDismissible: true,
      barrierLabel: '–î–µ—Ç–∞–ª–∏ —É—Ä–æ–∫–∞',
      barrierColor: Colors.black.withOpacity( 0.7),
      transitionDuration: const Duration(milliseconds: 300),
      pageBuilder: (context, anim1, anim2) {
        return Container();
      },
      transitionBuilder: (context, anim1, anim2, child) {
        return ScaleTransition(
          scale: Tween<double>(begin: 0.8, end: 1.0).animate(
            CurvedAnimation(parent: anim1, curve: Curves.easeOutBack),
          ),
          child: FadeTransition(
            opacity: anim1,
            child: LessonDetailDialog(
              lessonNumber: widget.lessonNumber,
              timeRange: widget.timeRange,
              color: widget.color,
              progress: _progress,
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: _showDetailDialog,
      child: SizedBox(
        width: 32,
        height: 32,
        child: CustomPaint(
          painter: _CircleProgressPainter(
            progress: _progress,
            progressColor: widget.color,
            bgColor: widget.color.withOpacity( 0.2),
            strokeWidth: 2,
          ),
          child: Center(
            child: Text(
              '${widget.lessonNumber}',
              style: TextStyle(
                fontSize: 13,
                fontWeight: FontWeight.bold,
                color: widget.color,
              ),
            ),
          ),
        ),
      ),
    );
  }
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ —É—Ä–æ–∫–∞
class LessonDetailDialog extends StatefulWidget {
  final int lessonNumber;
  final String timeRange;
  final Color color;
  final double progress;

  const LessonDetailDialog({
    super.key,
    required this.lessonNumber,
    required this.timeRange,
    required this.color,
    required this.progress,
  });

  @override
  State<LessonDetailDialog> createState() => _LessonDetailDialogState();
}

class _LessonDetailDialogState extends State<LessonDetailDialog> {
  Timer? _timer;
  bool _showElapsed = true; // true = –ø—Ä–æ—à–µ–¥—à–µ–µ, false = –æ—Å—Ç–∞–≤—à–µ–µ—Å—è
  Duration _currentDuration = Duration.zero;

  @override
  void initState() {
    super.initState();
    _updateDuration();
    _timer = Timer.periodic(const Duration(seconds: 1), (_) {
      if (mounted) {
        _updateDuration();
      }
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  void _updateDuration() {
    final now = DateTime.now();
    final times = widget.timeRange.split(' - ');
    if (times.length != 2) return;

    try {
      final startParts = times[0].split(':');
      final endParts = times[1].split(':');
      
      final startTime = DateTime(
        now.year,
        now.month,
        now.day,
        int.parse(startParts[0]),
        int.parse(startParts[1]),
      );
      
      final endTime = DateTime(
        now.year,
        now.month,
        now.day,
        int.parse(endParts[0]),
        int.parse(endParts[1]),
      );

      if (_showElapsed) {
        if (now.isBefore(startTime)) {
          setState(() => _currentDuration = Duration.zero);
        } else if (now.isAfter(endTime)) {
          setState(() => _currentDuration = endTime.difference(startTime));
        } else {
          setState(() => _currentDuration = now.difference(startTime));
        }
      } else {
        if (now.isBefore(startTime)) {
          setState(() => _currentDuration = endTime.difference(startTime));
        } else if (now.isAfter(endTime)) {
          setState(() => _currentDuration = Duration.zero);
        } else {
          setState(() => _currentDuration = endTime.difference(now));
        }
      }
    } catch (e) {
      debugPrint('Error calculating duration: $e');
    }
  }

  String _formatDuration(Duration duration) {
    final hours = duration.inHours;
    final minutes = duration.inMinutes.remainder(60);
    final seconds = duration.inSeconds.remainder(60);
    return '${hours.toString().padLeft(2, '0')}:${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
  }

  @override
  Widget build(BuildContext context) {
    final times = widget.timeRange.split(' - ');
    final startTime = times.isNotEmpty ? times[0] : '';
    final endTime = times.length > 1 ? times[1] : '';

    return Dialog(
      backgroundColor: Colors.white,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫: –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞
            Text(
              '${widget.lessonNumber}-–π –£—Ä–æ–∫',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: widget.color,
              ),
            ),
            const SizedBox(height: 20),
            
            // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  startTime,
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                    color: Colors.black87,
                  ),
                ),
                Text(
                  endTime,
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                    color: Colors.black87,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            ClipRRect(
              borderRadius: BorderRadius.circular(10),
              child: LinearProgressIndicator(
                value: widget.progress,
                minHeight: 12,
                backgroundColor: widget.color.withOpacity( 0.2),
                valueColor: AlwaysStoppedAnimation<Color>(widget.color),
              ),
            ),
            const SizedBox(height: 16),
            
            // –í—Ä–µ–º—è (–ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º–æ–µ)
            GestureDetector(
              onTap: () {
                setState(() {
                  _showElapsed = !_showElapsed;
                  _updateDuration();
                });
              },
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                decoration: BoxDecoration(
                  color: widget.color.withOpacity( 0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: widget.color, width: 2),
                ),
                child: Text(
                  _showElapsed
                      ? _formatDuration(_currentDuration)
                      : '-${_formatDuration(_currentDuration)}',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: widget.color,
                    fontFeatures: const [FontFeature.tabularFigures()],
                  ),
                ),
              ),
            ),
            const SizedBox(height: 8),
            Text(
              _showElapsed ? '–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏' : '–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏',
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey.shade600,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –° –î–ï–¢–ê–õ–Ø–ú–ò –£–†–û–ö–ê (–ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –≤—Ä–µ–º—è)
class LessonDetailsDialog extends StatefulWidget {
  final int lessonNumber;
  final String title;
  final String timeRange;
  final Color color;

  const LessonDetailsDialog({
    super.key,
    required this.lessonNumber,
    required this.title,
    required this.timeRange,
    required this.color,
  });

  @override
  State<LessonDetailsDialog> createState() => _LessonDetailsDialogState();
}

class _LessonDetailsDialogState extends State<LessonDetailsDialog> {
  bool _showElapsed = true; // true = –ø—Ä–æ—à–µ–¥—à–µ–µ, false = –æ—Å—Ç–∞–≤—à–µ–µ—Å—è
  late Timer _timer;
  Duration _currentDuration = Duration.zero;
  double _progress = 0.0;

  @override
  void initState() {
    super.initState();
    _updateDuration();
    _timer = Timer.periodic(const Duration(seconds: 1), (_) {
      if (mounted) {
        setState(() {
          _updateDuration();
        });
      }
    });
  }

  @override
  void dispose() {
    _timer.cancel();
    super.dispose();
  }

  void _updateDuration() {
    final times = widget.timeRange.split(' - ');
    if (times.length != 2) return;

    final now = DateTime.now();
    final startTime = _parseTime(times[0]);
    final endTime = _parseTime(times[1]);

    if (startTime == null || endTime == null) return;

    final start = DateTime(now.year, now.month, now.day, startTime.hour, startTime.minute);
    final end = DateTime(now.year, now.month, now.day, endTime.hour, endTime.minute);
    final total = end.difference(start);

    if (now.isBefore(start)) {
      // –£—Ä–æ–∫ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è
      _progress = 0.0;
      _currentDuration = Duration.zero;
    } else if (now.isAfter(end)) {
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Ä–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
      _progress = 1.0;
      if (_showElapsed) {
        _currentDuration = total; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      } else {
        _currentDuration = Duration.zero; // –û—Å—Ç–∞–≤—à–µ–µ—Å—è = 00:00:00
      }
    } else {
      // –£—Ä–æ–∫ –∏–¥–µ—Ç
      final elapsed = now.difference(start);
      _progress = elapsed.inSeconds / total.inSeconds;
      _currentDuration = _showElapsed ? elapsed : end.difference(now);
    }
  }

  DateTime? _parseTime(String time) {
    try {
      final parts = time.trim().split(':');
      if (parts.length == 2) {
        return DateTime(0, 1, 1, int.parse(parts[0]), int.parse(parts[1]));
      }
    } catch (e) {
      debugPrint('Error parsing time: $e');
    }
    return null;
  }

  String _formatDuration(Duration duration) {
    final hours = duration.inHours;
    final minutes = duration.inMinutes.remainder(60);
    final seconds = duration.inSeconds.remainder(60);
    return '${hours.toString().padLeft(2, '0')}:${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
  }

  @override
  Widget build(BuildContext context) {
    final times = widget.timeRange.split(' - ');
    final startTime = times.isNotEmpty ? times[0] : '';
    final endTime = times.length > 1 ? times[1] : '';

    return Dialog(
      backgroundColor: Colors.white,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // –†—è–¥ 1: –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞
            Text(
              '${widget.lessonNumber}-–π –£—Ä–æ–∫',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: widget.color,
              ),
            ),
            const SizedBox(height: 12),
            
            // –†—è–¥ 2: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            Text(
              widget.title,
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.w600,
                color: Colors.black87,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 20),
            
            // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  startTime,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.black54,
                  ),
                ),
                Text(
                  endTime,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.black54,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            
            // –†—è–¥ 3: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π, –º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏)
            ClipRRect(
              borderRadius: BorderRadius.circular(10),
              child: AnimatedSwitcher(
                duration: const Duration(milliseconds: 300),
                transitionBuilder: (child, anim) => FadeTransition(opacity: anim, child: child),
                child: LinearProgressIndicator(
                  key: ValueKey(_showElapsed),
                  value: _showElapsed ? _progress : (1.0 - _progress),
                  minHeight: 12,
                  backgroundColor: widget.color.withOpacity( 0.2),
                  valueColor: AlwaysStoppedAnimation<Color>(
                    _showElapsed ? widget.color : widget.color.withOpacity( 0.6)
                  ),
                ),
              ),
            ),
            const SizedBox(height: 20),
            
            // –†—è–¥ 4: –í—Ä–µ–º—è (–ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º–æ–µ) - –ß–ê–°:–ú–ò–ù–£–¢–ê:–°–ï–ö–£–ù–î–ê –° –ê–ù–ò–ú–ê–¶–ò–ï–ô
            GestureDetector(
              onTap: () {
                setState(() {
                  _showElapsed = !_showElapsed;
                  _updateDuration();
                });
              },
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 14),
                decoration: BoxDecoration(
                  color: widget.color.withOpacity( 0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: widget.color, width: 2),
                ),
                child: AnimatedSwitcher(
                  duration: const Duration(milliseconds: 200),
                  transitionBuilder: (child, anim) => FadeTransition(opacity: anim, child: child),
                  child: Text(
                    _showElapsed
                        ? _formatDuration(_currentDuration)
                        : '-${_formatDuration(_currentDuration)}',
                    key: ValueKey(_showElapsed),
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontSize: 22,
                      fontWeight: FontWeight.bold,
                      color: widget.color,
                      fontFeatures: const [FontFeature.tabularFigures()],
                    ),
                  ),
                ),
              ),
            ),
            const SizedBox(height: 8),
            Text(
              _showElapsed ? '–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏' : '–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏',
              style: TextStyle(
                fontSize: 13,
                color: Colors.grey.shade600,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// ============================================================================
// –ü–£–ù–ö–¢ 16: FixedLessonTimer - –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–∞–π–º–µ—Ä–∞
// ============================================================================
class FixedLessonTimer extends StatefulWidget {
  final DateTime start;
  final DateTime end;
  const FixedLessonTimer({required this.start, required this.end, super.key});

  @override
  State<FixedLessonTimer> createState() => _FixedLessonTimerState();
}

class _FixedLessonTimerState extends State<FixedLessonTimer>
    with SingleTickerProviderStateMixin {
  late AnimationController _ctrl;
  bool _showRemaining = false;

  double get _total => widget.end.difference(widget.start).inSeconds.toDouble();
  double get _elapsed =>
      DateTime.now().difference(widget.start).inSeconds.toDouble().clamp(0, _total);

  @override
  void initState() {
    super.initState();
    debugPrint('TIMER: init | start: ${widget.start} | end: ${widget.end}');
    _ctrl = AnimationController(vsync: this, duration: const Duration(seconds: 1))
      ..repeat();
  }

  @override
  void dispose() {
    debugPrint('TIMER: dispose');
    _ctrl.dispose();
    super.dispose();
  }

  void _toggle() {
    setState(() => _showRemaining = !_showRemaining);
    debugPrint('TIMER: toggle | showRemaining: $_showRemaining');
  }

  String _formatTime(int seconds) {
    final h = seconds ~/ 3600;
    final m = (seconds % 3600) ~/ 60;
    final s = seconds % 60;
    return '${h.toString().padLeft(2, '0')}:${m.toString().padLeft(2, '0')}:${s.toString().padLeft(2, '0')}';
  }

  @override
  Widget build(BuildContext context) {
    final progress = _elapsed / _total;
    return GestureDetector(
      onTap: _toggle,
      child: AnimatedBuilder(
        animation: _ctrl,
        builder: (_, __) {
          final timeValue = _showRemaining
              ? _formatTime((_total - _elapsed).toInt())
              : _formatTime(_elapsed.toInt());
          
          return CustomPaint(
            painter: _TimerPainter(progress: progress, showRemaining: _showRemaining),
            child: Container(
              alignment: Alignment.center,
              width: 160, // –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô —Ä–∞–∑–º–µ—Ä
              height: 36,
              child: Text(
                _showRemaining ? '-$timeValue' : timeValue,
                style: const TextStyle(
                  fontFeatures: [FontFeature.tabularFigures()],
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}

class _TimerPainter extends CustomPainter {
  final double progress;
  final bool showRemaining;
  _TimerPainter({required this.progress, required this.showRemaining});

  @override
  void paint(Canvas canvas, Size size) {
    final bg = Paint()..color = const Color(0xFF409187).withOpacity( 0.18);
    final fg = Paint()..color = showRemaining ? Colors.lightGreen : const Color(0xFF409187);
    final rrect = RRect.fromRectAndRadius(Offset.zero & size, const Radius.circular(8));
    canvas.drawRRect(rrect, bg);
    
    final filledWidth = showRemaining
        ? size.width * (1 - progress)
        : size.width * progress;
    final rect = Rect.fromLTWH(
      showRemaining ? size.width - filledWidth : 0,
      0,
      filledWidth,
      size.height,
    );
    canvas.drawRRect(RRect.fromRectAndRadius(rect, const Radius.circular(8)), fg);
  }

  @override
  bool shouldRepaint(covariant _TimerPainter old) =>
      old.progress != progress || old.showRemaining != showRemaining;
}

class BannerWidget extends StatelessWidget {
  final Color color;
  final IconData icon;
  final String text;

  const BannerWidget({
    super.key,
    required this.color,
    required this.icon,
    required this.text,
  });

  @override
  Widget build(BuildContext context) {
    return const SizedBox.shrink(); 
  }
}

class _CircleProgressPainter extends CustomPainter {
  final double progress;
  final Color progressColor;
  final Color bgColor;
  final double strokeWidth;

  _CircleProgressPainter({
    required this.progress,
    required this.progressColor,
    required this.bgColor,
    this.strokeWidth = 3.0,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final center = Offset(size.width / 2, size.height / 2);
    final radius = (size.width - strokeWidth) / 2;
    
    final backgroundPaint = Paint()
      ..color = bgColor
      ..strokeWidth = strokeWidth
      ..style = PaintingStyle.stroke
      ..strokeCap = StrokeCap.round;
    
    canvas.drawCircle(center, radius, backgroundPaint);
    
    if (progress > 0) {
      final progressPaint = Paint()
        ..color = progressColor
        ..strokeWidth = strokeWidth
        ..style = PaintingStyle.stroke
        ..strokeCap = StrokeCap.round;

      canvas.drawArc(
        Rect.fromCircle(center: center, radius: radius),
        -math.pi / 2,
        2 * math.pi * progress,
        false,
        progressPaint,
      );
    }
  }

  @override
  bool shouldRepaint(covariant _CircleProgressPainter oldDelegate) {
    return true;
  }
}

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –ù–µ–¥–µ–ª—è
class _WeekDayTimerWidget extends StatefulWidget {
  final DailySchedule dailySchedule;
  final Color activeColor;
  final int lessonCount;

  const _WeekDayTimerWidget({
    required this.dailySchedule,
    required this.activeColor,
    required this.lessonCount,
  });

  @override
  State<_WeekDayTimerWidget> createState() => _WeekDayTimerWidgetState();
}

class _WeekDayTimerWidgetState extends State<_WeekDayTimerWidget> {
  Timer? _timer;
  double _progress = 0.0;

  @override
  void initState() {
    super.initState();
    _updateProgress();
    _timer = Timer.periodic(const Duration(seconds: 1), (_) {
      if (mounted) {
        _updateProgress();
      }
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  void _updateProgress() {
    if (widget.dailySchedule.lessons.isEmpty) return;
    
    final now = DateTime.now();
    double newProgress = 0.0;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞
      final firstLesson = widget.dailySchedule.lessons.first;
      final lastLesson = widget.dailySchedule.lessons.last;
      
      final firstTimes = firstLesson.time.split(' - ');
      final lastTimes = lastLesson.time.split(' - ');
      
      if (firstTimes.isNotEmpty && lastTimes.length == 2) {
        final startParts = firstTimes[0].split(':');
        final endParts = lastTimes[1].split(':');
        
        if (startParts.length == 2 && endParts.length == 2) {
          final dayStart = DateTime(now.year, now.month, now.day, int.parse(startParts[0]), int.parse(startParts[1]));
          final dayEnd = DateTime(now.year, now.month, now.day, int.parse(endParts[0]), int.parse(endParts[1]));
          
          if (now.isBefore(dayStart)) {
            newProgress = 0.0;
          } else if (now.isAfter(dayEnd)) {
            newProgress = 1.0;
          } else {
            final elapsed = now.difference(dayStart).inSeconds.toDouble();
            final total = dayEnd.difference(dayStart).inSeconds.toDouble();
            newProgress = (elapsed / total).clamp(0.0, 1.0);
          }
        }
      }
    } catch (e) {
      debugPrint('Error calculating day progress: $e');
    }

    if (mounted && _progress != newProgress) {
      setState(() {
        _progress = newProgress;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: 32,
      height: 32,
      child: CustomPaint(
        painter: _CircleProgressPainter(
          progress: _progress,
          progressColor: widget.activeColor,
          bgColor: widget.activeColor.withOpacity( 0.3),
          strokeWidth: 2.0,
        ),
        child: Center(
          child: Text(
            '${widget.lessonCount}',
            style: TextStyle(
              color: widget.activeColor,
              fontSize: 13,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      ),
    );
  }
}

// ============================================================================
// –ü–£–ù–ö–¢ 1: WeekCollapsible - –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞—Å–∫—Ä—ã—Ç–∏—è (700ms)
// ============================================================================
class WeekCollapsible extends StatefulWidget {
  final Widget header;
  final List<Widget> children;
  final bool initiallyExpanded;
  final ValueChanged<bool>? onExpansionChanged;
  final GlobalKey? collapsibleKey;
  final bool isCurrentDay; // –ü–£–ù–ö–¢ 1: –§–ª–∞–≥ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è

  const WeekCollapsible({
    required this.header,
    required this.children,
    this.initiallyExpanded = false,
    this.onExpansionChanged,
    this.collapsibleKey,
    this.isCurrentDay = false, // –ü–£–ù–ö–¢ 1: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é false
    super.key,
  });

  @override
  State<WeekCollapsible> createState() => _WeekCollapsibleState();
}

class _WeekCollapsibleState extends State<WeekCollapsible> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _heightAnimation;
  bool _expanded = false;
  bool _isAnimating = false;

  @override
  void initState() {
    super.initState();
    _expanded = widget.initiallyExpanded;
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 700), // –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
    );
    _heightAnimation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOutCubic, // –ú—è–≥–∫–∞—è –∫—Ä–∏–≤–∞—è
    );
    if (_expanded) {
      _controller.value = 1.0;
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  Future<void> _toggle() async {
    if (_isAnimating) {
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏—è—Ö
      debugPrint('ANIMATION: restart | widget: WeekCollapsible');
      _controller.stop();
    }
    
    setState(() => _isAnimating = true);
    debugPrint('ANIMATION: start | widget: WeekCollapsible | expanded: ${!_expanded} | timestamp: ${DateTime.now()}');
    
    if (!_expanded) {
      // –ü–£–ù–ö–¢ 6: –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏
      HapticFeedback.lightImpact();
      setState(() => _expanded = true);
      await _controller.forward(from: _controller.value);
      debugPrint('ANIMATION: expand_complete | duration: 700ms');
    } else {
      await _controller.reverse(from: _controller.value);
      setState(() => _expanded = false);
      debugPrint('ANIMATION: collapse_complete | duration: 700ms');
    }
    
    setState(() => _isAnimating = false);
    widget.onExpansionChanged?.call(_expanded);
  }

  @override
  Widget build(BuildContext context) {
    // –ü–£–ù–ö–¢–´ 1-4: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ–Ω–∞ –∏ —Ä–∞–º–∫–∏
    // –°–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π –∫–æ–≥–¥–∞ –∑–∞–∫—Ä—ã—Ç, —Ç—ë–º–Ω–æ-–∑–µ–ª—ë–Ω—ã–π –∫–æ–≥–¥–∞ —Ä–∞—Å–∫—Ä—ã—Ç
    const collapsedBg = Color(0xFFDFF6EE); // –°–≤–µ—Ç–ª—ã–π –∑–µ–ª—ë–Ω—ã–π
    const expandedBg = Color(0xFF2E8B57); // –¢—ë–º–Ω—ã–π –∑–µ–ª—ë–Ω—ã–π
    
    return AnimatedBuilder(
      animation: _heightAnimation,
      builder: (ctx, child) {
        // Color.lerp –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        final bg = widget.isCurrentDay 
          ? Color.lerp(collapsedBg, expandedBg, _heightAnimation.value) 
          : Colors.white;
        
        // –†–∞–º–∫–∞ –∞–Ω–∏–º–∏—Ä—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º
        final borderOpacity = widget.isCurrentDay ? _heightAnimation.value : 0.0;
        final borderWidth = widget.isCurrentDay ? (2.0 * _heightAnimation.value) : 1.0;
        final borderColor = widget.isCurrentDay 
          ? const Color(0xFF409187).withOpacity(0.3 + 0.7 * _heightAnimation.value)
          : Colors.grey.shade300;
        
        return Container(
          key: widget.collapsibleKey,
          margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 4),
          decoration: BoxDecoration(
            color: bg,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: borderColor, width: borderWidth),
            boxShadow: const [
              BoxShadow(
                color: Colors.black12,
                blurRadius: 6,
                offset: Offset(0, 2),
              ),
            ],
          ),
          clipBehavior: Clip.hardEdge, // –ü–£–ù–ö–¢ 2: –£–±—Ä–∞—Ç—å bleeding
          child: Column(
            children: [
              InkWell(
                onTap: _toggle,
                child: widget.header,
              ),
              SizeTransition(
                sizeFactor: _heightAnimation,
                axisAlignment: -1.0,
                child: Container(
                  padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
                  child: Column(
                    children: [
                      // Staggered –∫–æ–Ω—Ç–µ–Ω—Ç
                      ...widget.children,
                // –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –≤–Ω–∏–∑—É
                if (_expanded)
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                    child: Center(
                      child: InkWell(
                        onTap: _toggle,
                        borderRadius: BorderRadius.circular(8),
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 6),
                          decoration: BoxDecoration(
                            color: const Color(0xFF409187).withOpacity( 0.1),
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(color: const Color(0xFF409187), width: 1),
                          ),
                          child: const Icon(
                            Icons.keyboard_arrow_up,
                            color: Color(0xFF409187),
                            size: 20,
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// ============================================================================
// –ü–£–ù–ö–¢ 2: StaggeredLessonList - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
// ============================================================================
class StaggeredLessonList extends StatefulWidget {
  final List<Widget> items;
  final int msDelay;

  const StaggeredLessonList({
    required this.items,
    this.msDelay = 120,
    super.key,
  });

  @override
  State<StaggeredLessonList> createState() => _StaggeredLessonListState();
}

class _StaggeredLessonListState extends State<StaggeredLessonList> {
  final List<bool> _visible = [];
  final List<Timer> _timers = [];

  @override
  void initState() {
    super.initState();
    _visible.addAll(List.filled(widget.items.length, false));
    _schedule();
  }

  void _schedule() {
    for (int i = 0; i < widget.items.length; i++) {
      final timer = Timer(Duration(milliseconds: widget.msDelay * i), () {
        if (mounted) {
          setState(() => _visible[i] = true);
        }
      });
      _timers.add(timer);
    }
  }

  void _cancel() {
    for (final timer in _timers) {
      timer.cancel();
    }
    _timers.clear();
  }

  @override
  void dispose() {
    _cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: List.generate(widget.items.length, (i) {
        return AnimatedOpacity(
          opacity: _visible[i] ? 1.0 : 0.0,
          duration: const Duration(milliseconds: 380),
          curve: Curves.easeOut,
          child: AnimatedSlide(
            offset: _visible[i] ? Offset.zero : const Offset(0, 0.08),
            duration: const Duration(milliseconds: 380),
            curve: Curves.easeOut,
            child: widget.items[i],
          ),
        );
      }),
    );
  }
}

// ============================================================================
// –ü–£–ù–ö–¢ 5: BorderLoader - 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ (A, B, C)
// ============================================================================
enum BorderLoaderStyle { 
  unidirectional,  // A: –û–¥–Ω–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–µ–≥—É—â–∏–π —Å–≤–µ—Ç
  bidirectional,   // B: –î–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π gradient sweep
  marching,        // C: –ú–∞—Ä—à–∏—Ä—É—é—â–∏–π –ø—É–Ω–∫—Ç–∏—Ä
}

class BorderLoaderWidget extends StatefulWidget {
  final Widget child;
  final bool active;
  final BorderLoaderStyle style;
  final Color color;

  const BorderLoaderWidget({
    required this.child,
    this.active = false,
    this.style = BorderLoaderStyle.unidirectional,
    this.color = const Color(0xFF409187),
    super.key,
  });

  @override
  State<BorderLoaderWidget> createState() => _BorderLoaderWidgetState();
}

class _BorderLoaderWidgetState extends State<BorderLoaderWidget> with SingleTickerProviderStateMixin {
  late AnimationController _controller;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1500),
    );
    if (widget.active) _controller.repeat();
  }

  @override
  void didUpdateWidget(BorderLoaderWidget oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.active && !_controller.isAnimating) {
      _controller.repeat();
    } else if (!widget.active && _controller.isAnimating) {
      _controller.stop();
      _controller.reset();
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        return CustomPaint(
          foregroundPainter: _getBorderPainter(),
          child: child,
        );
      },
      child: widget.child,
    );
  }

  CustomPainter _getBorderPainter() {
    switch (widget.style) {
      case BorderLoaderStyle.unidirectional:
        return BorderLoaderPainterA(
          progress: widget.active ? _controller.value : 0.0,
          color: widget.color,
        );
      case BorderLoaderStyle.bidirectional:
        return BorderLoaderPainterB(
          progress: widget.active ? _controller.value : 0.0,
          color: widget.color,
        );
      case BorderLoaderStyle.marching:
        return BorderLoaderPainterC(
          progress: widget.active ? _controller.value : 0.0,
          color: widget.color,
        );
    }
  }
}

// Painter –∫–ª–∞—Å—Å—ã –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ widgets/border_painters.dart
